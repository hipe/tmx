require_relative 'test-support'

module Skylab::Yacc2Treetop::TestSupport

  # <-

describe "[y2] CLI integration" do

  extend TS_

  context "(reactive model)" do

    use :expect_event

    it "minimal normal case works" do

      _yacc_file = ::File.join( FIXTURES_PATH, '050.sequences.y3' )

      io = Home_::Build_string_IO__[]

      d = subject_API.translate(
        :downstream_IO, io,
        :wrap_in_grammar, 'Bingo::Bongo',
        :yacc_file, _yacc_file,
        & handle_event_selectively )

      expect_no_more_events
      d.should be_zero

      io.string.should eql <<-HERE.unindent
        # Autogenerated from yacc2treetop. Edits may be lost.
        module Bingo
          grammar Bongo
            # who hah yah yah
            # yah yah

            rule selectors_group
              selector ( COMMA S* selector )*
            end
          end
        end
      HERE
    end

    def subject_API
      Home_
    end
  end

  context "(CLI)" do

    use :expect_CLI

  context 'doing nothing' do

    invoke

    it 'writes specific complaint, usage, invite to stderr' do

      expect :e, /\Aexpecting <yacc-file>\z/
      _expect_usage_and_invited
    end
  end

  context 'asking for help' do

    invoke '-h'

    it 'writes usage, option listing to stderr' do

      _tree = flush_help_screen_to_tree
      cx = _tree.children

      cx[ 0 ].x.unstyled_header_content.should eql 'usage'
      cx[ 1 ].x.should be_blank
      cx[ 2 ].x.unstyled_header_content.should eql 'description'
      cx[ 3 ].x.should be_blank
      cx[ 4 ].x.unstyled_header_content.should eql 'options'
      5 == cx.length or fail
      expect_succeeded
    end
  end

  context 'giving 2 args' do

    invoke 'one', 'two'

    it "writes specific complaint, usage, invite to stderr" do

      stream_for_expect_stdout_stderr
      expect :e, 'unexpected argument "two"'
      _expect_usage_and_invited
    end
  end

  context 'giving it a nonexistant filename' do

    invoke ::File.join( TestSupport_.dir_pathname.to_path, 'not-there.yacc' )

    it 'writes specific complaint, usage, invite to stderr' do

      stream_for_expect_stdout_stderr
      expect :e, /\ANo such file or directory: [-_\/\.a-zA-Z0-9]+\.yacc\z/
      _expect_invited
    end
  end

  context 'giving it a good filename' do

    invoke ::File.join( FIXTURES_PATH, '060.choice-parse.y3' )

    it 'writes a treetop grammar to stdout' do

      expect :o, "# Autogenerated from yacc2treetop. Edits may be lost."
      expect :o, "rule simple_selector_sequence"
      expect :o, "  ( type_selector / universal )"
      expect :o, /\A    \( HASH \/ class \//
      expect :o, 'end'
      expect_no_more_lines
      expect_succeeded
    end
  end

  def _expect_usage_and_invited

    expect :styled, :e, 'usage: y2tt [opts] { <yacc-file> | "-" }'
    _expect_invited
  end

  def _expect_invited

    expect :styled, :e, 'y2tt -h for help'
    expect_no_more_lines
    @exitstatus.should eql 5
  end


  end  # end CLI context
end  # end file describe
end  # end test support module
