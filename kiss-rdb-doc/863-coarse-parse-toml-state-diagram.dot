digraph g {

node[shape=rect style=filled]

n000[label="ready"]
n000->n100[label="blank or\ncomment"]
n000->n400[label="table start"]
n000->n900[label="(eos)"]

n100[label="BC block (1)"]
n100->n100[label="blank or\ncomment"]
n100->n400[label="table start"]
n100->n900[label="(eos)"]

n400[label="table\nbegun"]
n400->n400[label="table start"]
n400->n450[label="blank or\ncomment"]
n400->n700[label="single-line KV"]
n400->n600[label="multi-line KV head"]
n400->n900[label="(eos)"]

n450[label="BC block (2)"]
n450->n400[label="table start"]
n450->n450[label="blank or\ncomment"]
n450->n600[label="multi-line KV head"]
n450->n700[label="single-line KV"]
n450->n900[label="(eos)"]

n600[label="inside\nmulti-line"]
n600->n600[label="no delim"]
n600->n700[label="yes delim"]

n700[label="inside\ntable"]
n700->n400[label="table start"]
n700->n600[label="multi-line KV head"]
n700->n700[label="single-line KV"]
n700->n750[label="blank or comment"]
n700->n900[label="(eos)"]

n750[label="BC block (3)"]
n750->n400[label="table start"]
n750->n600[label="multi-line KV head"]
n750->n700[label="single-line KV"]
n750->n750[label="blank or comment"]
n750->n900[label="(eos)"]

n900[label=done]

label="
this is a state transition diagram for a 'coarse parse' pass of a stream-
based toml file parser; one that can scale up to very large files because
(for example) it need not keep more than one entity (section) in memory
at once.

(the actual efficiency depends on what you do at the various actions; but
the point is this is a resource-efficient approach that obviates the need
to read the whole file into memory at once as one giant dictionary.)

  • rectangles are states. (they are all grey.)
  • arrows are transitions
  • this is a coarse, line-based parser.
    here, \"input tokens\" are always lines.
  • for each next input token find a suitable transition
    from the state you are in and folllow the arrow.
  • (because all tokens are lines, the labels of the transitions
    are shorthand for \"[that kind of line]\" so for example
    \"section\" means \"section line\" and so on.)
  • if given your current state and current token (or the end token)
    there is no matching transtion, this is an input error.
  • if by the end of input the end state is not reached, this is
    an input error. (in fact this is implied by the graph if you
    conceive of the end of input as a kind of token.)
  • currently we don't see empty-ish files as valid but
    this may have to change down the road.

a big caveat is that this is a hack. this is not guaranteed to
parse all toml, only our subset.
"

}
/*
#history-A.1: remove actions (ellipses) for clarity
#born.
*/
