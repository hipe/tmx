#!/usr/bin/env ruby -w

program = -> argv, stdin, stdout, stderr, pn_s_a do

  y = ::Enumerator::Yielder.new( & stderr.method( :puts ) )

  es = nil ; _OK = 0 ; _NO = 1  # exit statii

  _EMPTY_S = ''

  _PROCEDE = nil  # not an exit stautus - the absence of one

  lbl = kbd = -> s { "\e[32m#{ s }\e[0m" }

  kw = -> s { "\e[04m#{ s }\e[0m" }

  repl_str = '%d'
  _1 = 'digit-1' ; _2 = 'digit-2'

  subsystem = -> sym do
    require 'skylab/common'
    ::Skylab::Common::Autoloader.require_sidesystem sym
  end

  require 'optparse'
  ignoring = pen = syntax = nil
  _DEFAULT_COLS = 80 ; _MAX_COLS = 120
  be_verbose = is_dry = false
  match_whole_words = true

  _SPACE = ' '

  progname = -> do
    x = nil
    p = -> do
      x = [ ::File.basename( pn_s_a.first ), * pn_s_a[ 1 .. -1 ] ] * _SPACE
    end
    -> do
      x || p[]
    end
  end.call

  op = ::OptionParser.new do |o|

    o.on '-J str', "will use <str> as the digit placeholder in",
        "your template expression (default: #{ repl_str })" do |x|
      repl_str = x
    end
    o.on '-W', "turns match whole words off." do
      match_whole_words = true
    end
    o.on '-n', '--dry-run', 'dry run' do
      is_dry = true
    end
    o.on '-v', '--verbose', 'verbose output' do
      be_verbose = true
    end
    o.on '-h', '--help', 'this screen.' do ||
      argv.length.nonzero? and ignoring[]
      pen[].instance_exec do
        _USAGE = 'usage:'
        _IND = _SPACE * _USAGE.length
        y << "#{ lbl _USAGE } #{ progname[] } #{ syntax[] }"
        y << nil

        _String_lib = subsystem[ :Basic ]::String

        # _cols_ = _CLI_lib.cols -> { _DEFAULT_COLS }
        _cols_ = _DEFAULT_COLS
        _cols = [ _cols_, _MAX_COLS ].min

        yy = _String_lib::WordWrapper::Crazy.curry _EMPTY_S, _cols, y

        # yy.indent = _IND

        yy << "#{ lbl 'synopsis:' } a quite particular near-one-off"
        yy.indent = _IND
        yy << "for creating more space in (probably) [sg] number identifiers."
        yy << "(hasn't been used in years..)"
        yy.indent = _EMPTY_S
        yy << nil
        yy << "#{ lbl 'description:' } #{ kw 'search' } is any string that #{
          }contains exactly one occurrence of"
        yy.indent = _IND
        yy << "#{ kw 'replstr' }. for each line of input (from the #{ kw 'file' }(s) or from"
        yy << "each line of stdin), for every occurrence of #{ kw 'search' }"
        yy << "found in the input lines, the purpose of this utility is to"
        yy << "change selectively such digits based on the following:"
        yy << nil
        yy << "the matched digit may be either increased, decreased or"
        yy << "left as-is based on the relationship"
        yy << "between #{ kw _1 } and #{ kw _2 }: if #{ kw _2 } is greater"
        yy << "than #{ kw _1 }, this is a \"slide to the right\" to"
        yy << "\"make room\". conversely if #{ kw _2 } is smaller than"
        yy << "#{ kw _1 }, this is a \"slide to the left\" to \"plug holes\"."
        yy << nil
        yy << "when \"making room\", only those matches whose digit is"
        yy << "greater than or equal to #{ kw _1 } are increased. when it is"
        yy <<  "a \"slide to the left\", only those strings are affected"
        yy << "(decreased this time) whose digits are greater than or equal"
        yy << "to #{ kw _2 }. the amount of increase or decrease is determined"
        yy << "by to the distance between #{ kw _1 } and #{ kw _2 }."
        yy << nil
        yy << "when input is stdin, output lines (1 for 1) are to stdout."
        yy << nil
        yy << "when input comes in the form of filenames **changes are always"
        yy << "edit in place**. but for now this will call out to git to"
        yy << "confirm that the files are under version control and in a"
        yy << "pristine state before any changes are made."
        yy.flush

        y << nil
        y << "#{ lbl 'example:' }"
        y << "            #{ progname[] } -J '%x' -w '#foo-%x' 4 5 file.txt"
        y << nil
        yy.indent = _IND
        yy << 'the above will find any occurrences of "#foo-100" and change'
        yy << 'it to "#foo-101" and so on. an occurrence of "#foo-3" will'
        yy << "not be affected."
        yy.flush
        y << nil

        y << "#{ lbl 'options:' }"
        o.summarize( & y.method( :<< ) )

        es = _OK
      end
    end
  end

  pen = -> do
    o = ::Object.new
    [ [ :lbl, lbl ], [ :kw, kw ] ].each do |i, p|
      o.send :define_singleton_method, i, -> s { p[ s ] }
    end
    pen = -> { o } ; o
  end

  syntax = -> do
    pen[].instance_exec do
      "[-n] [-v] [-J #{ kw 'replstr' }] #{ kw 'search' } #{
        }#{ kw _1 } #{ kw _2 } #{
         }[#{ kw 'file' } #{ kw '..' }]"
    end
  end

  ignoring = -> do
    y << "(ignoring: \"#{ argv.shift( argv.length ) * _SPACE }\")" ; nil
  end

  invite_string = -> do
    "see #{ kbd[ "#{ progname[] } -h" ] } for help"
  end

  usage = -> msg do
    y << msg
    y << invite_string[]
    _NO
  end

  begin
    op.parse! argv
  rescue ::OptionParser::ParseError => e
  end

  e and break usage[ e.message ]

  if es
    argv.length.nonzero? and ignoring[]
    break es
  end

  argv.length.zero? and break usage[ "expecting #{ kw[ 'search' ] }" ]
  search = argv.shift
  _DIGIT = /\A\d+\z/ ; _NEGDIGIT = /\A-?\d+\z/
  _DIGIT.match(( from = argv.shift )) or break usage[ "expecting digit #{
    }had #{ from.inspect } for #{ kw[ _1 ] }" ]
  from = from.to_i
  _NEGDIGIT.match(( to = argv.shift )) or break usage[ "expecting digit #{
    }had #{ to.inspect } for #{ kw[ _2 ] }" ]
  to = to.to_i

  file_a = argv ; argv = nil
  if stdin.tty?
    file_a.length.zero? and break usage[ "expecting #{ kw[ 'file' ] } #{
      }or input from stdin" ]

    check_SCM = -> do
      subsystem[ :Git ].check_SCM y, file_a,
        :be_verbose, be_verbose, :when_status, -> do
          y << "#{ progname[] } will not procede because of this."
          _NO
        end
    end
    es = check_SCM[] and break es

    require 'fileutils' ; require 'pathname' ; require 'tmpdir'

    input_output_p_a_a = file_a.map do |file|
      _input = -> do
        ::File.open file, 'r'
      end
      opn = fh = nil
      _output = -> do
        opn = ::Pathname.new "#{ ::Dir.tmpdir }/_my_foo_"
        fh = opn.open ::File::WRONLY | ::File::TRUNC | ::File::CREAT
        fh
      end
      _conclude = -> lines_d do
        fh.close
        if lines_d.zero?
          stderr.puts "no change, skipping: #{ file }"
        else
          ::FileUtils.mv opn.to_s, file, verbose: be_verbose, noop: is_dry
          if be_verbose
            y << "(#{ lines_d } lines changed#{ ' (dry run)' if is_dry })"
          end
        end
        _PROCEDE
      end
      [ _input, _output, _conclude ]
    end
  else
    file_a.length.nonzero? and break usage[ "cannot accept #{ kw[ 'file'] } #{
      }in stdin mode - #{ file_a[ 0 ] }" ]
    _conclude = -> d do
      be_verbose and stderr.puts "(#{ d } line(s) matched)"
      _PROCEDE
    end
    input_output_p_a_a = [ [ -> { stdin }, -> { stdout }, _conclude ] ]
  end

  require 'strscan'
  scn = ::StringScanner.new search

  d = scn.skip_until %r(#{ ::Regexp.escape repl_str })
  d or break usage[ "did not find #{ kw[ 'replstr' ] } \"#{ repl_str }\" #{
   }anywhere in #{ kw[ 'search' ] } \"#{ search }\"" ]

  if 0 < d
    first_part = search[ 0, ( d - repl_str.length ) ]
  end
  if d < search.length
    last_part = search[ d .. -1 ]
  end

  _STARTS_WITH_WORD_CHAR = /\A\w/
  _ENDS_WITH_WORD_CHAR = /\w\z/
  if match_whole_words
    _STARTS_WITH_WORD_CHAR =~ first_part and w0 = '\\b'
    _ENDS_WITH_WORD_CHAR =~ last_part and wz = '\\b'
  end

  rx = %r(#{ w0 }#{ ::Regexp.escape "#{ first_part }" }(\d+)#{
    }#{ ::Regexp.escape "#{ last_part }" }#{ wz })

  # rx_ = /\A(?:(?!#{ rx.source }).)+/

  be_verbose and y << "(regex: /#{ rx.source }/)"

  delta = to - from
  is_in_range = if 0 < delta then
    -> digit do
      from <= digit
    end
  else
    -> digit do
      to <= digit
    end
  end

  report_change = -> occ, new_str do
    hdr = "(line %d)" % occ.lineno
    stderr.puts "#{ hdr } < #{ occ.match }"
    stderr.puts "#{ _SPACE * hdr.length } > #{ new_str }" ; nil
  end

  process_stream_pair = -> input_lines, output_stream, final_p do
    scn = subsystem[ :Headless ]::CLI.occurrence_scanner rx, input_ines
    s_a = [] ; last_lineno_changed = nil ; num_lines_changed = 0
    lineno = nil
    flush = -> do
      s_a.length.zero? and break
      output_stream.write( s_a * _EMPTY_S )
      s_a.clear ; nil
    end
    prev_lineno = nil
    maybe_flush = -> do
      prev_lineno = lineno
      maybe_flush = -> do
        prev_lineno == lineno and break
        flush[]
        prev_lineno = lineno ; nil
      end
    end
    while (( occ = scn.gets ))
      befor, match, lineno = occ.to_a
      maybe_flush[]
      if befor
        s_a << befor
      end
      if match
        md = rx.match match
        d = md[ 1 ].to_i
        if is_in_range[ d ]
          d += delta
          new = "#{ first_part }#{ d }#{ last_part }"
          be_verbose and report_change[ occ, new ]
          s_a << new
          if last_lineno_changed != lineno
            last_lineno_changed = lineno
            num_lines_changed += 1
          end
        else
          s_a << match
        end
      end
    end
    flush[]
    final_p[ num_lines_changed ]
  end

  input_output_p_a_a.each do |input_pn_p, output_pn_p, finalize_p|
    input_stream = input_pn_p[]
    output_stream = output_pn_p[]
    es = process_stream_pair[ input_stream, output_stream, finalize_p ]
    es and break
  end
  es and break es
  y << 'done.'
  _OK

end

if __FILE__ == $PROGRAM_NAME
  exit program[ ARGV, $stdin, $stdout, $stderr, [ $PROGRAM_NAME ] ]
else
  Skylab__Zerk__OneOffs::Beauty_salon_slide_numbers = program  # #[#ze-063.1] mountable one-off
end
