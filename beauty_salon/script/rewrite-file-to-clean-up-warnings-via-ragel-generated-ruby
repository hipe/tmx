#!/usr/bin/env ruby -w

module Skylab__BeautySalon__OneOffs__LaLaLaRuby___

  class CLI

    def self.__describe_into y

      y << "description:"
      y << "the ragel-generated ruby generates warnings."
      y << "long-term, we'd like to contribute to that project so it doesn't."
      y << "but for now, we clean up the generated files programmatically"
      y << "(which was sort of a fun exercise anway)."
      y << nil
      y << "the bulk of this work happens in a dedicated magnetic."
      y << "this command-line executable is just a thin wrapper around that,"
      y << "so that we can reach this operation from other shell script."
    end

    def initialize *a
      @ARGV, _, @stdout, @stderr, @program_name_string_array = a
    end

    def execute
      case 1 <=> @ARGV.length
      when -1 ;  __when_many_args
      when  0 ;  __when_one_arg
      when  1 ;  __when_no_args
      end
    end

    def __when_many_args
      _usage "unexpected argument: #{ @ARGV[1].inspect }."
    end

    def __when_no_args
      _usage "missing argument."
    end

    def __when_one_arg
      if /\A--?h(?:e(?:l(?:p)?)?)?\z/i =~ @ARGV.first
        _express_help
      else
        @input_file = @ARGV.fetch 0
        @ARGV.clear  # meh
        __money_town
      end
    end

    def _usage msg
      y = _errput_yielder
      y << msg
      y << _usage_line
      y << "use '#{ _program_name } -h' for help."
      UNABLE_EXITSTATUS_
    end

    def _express_help
      y = _errput_yielder
      y << _usage_line
      y << nil
      self.class.__describe_into y
      SUCCESS_EXITSTATUS_
    end

    def _usage_line
      "usage: #{ _program_name } <file>"
    end

    def _program_name
      ::File.basename @program_name_string_array.last
    end

    # --

    def __money_town

      _init_listener

      x = __tmpfile_for_warnings_cleanup
      if x
        __mv_tmpfile_into_real_file x

      elsif x.nil?  # no warnings were generated by loading the file
        SUCCESS_EXITSTATUS_

      else
        UNABLE_EXITSTATUS_
      end
    end

    def __mv_tmpfile_into_real_file tmpfile
      _FU = ::Skylab::BeautySalon.lib_.file_utils
      fu = ::Object.new
      fu.extend _FU
      fu.instance_variable_set :@fileutils_output, @stderr
      fu.instance_variable_set :@fileutils_label, "weee: "
      _es = fu.send :mv, tmpfile, @input_file, verbose: true
      _es.zero?  # type check
      _es
    end

    def __tmpfile_for_warnings_cleanup

      require 'skylab/beauty_salon'

      ::Skylab::BeautySalon::SillyLifeMagnetics_::CleanUpAgainstWarnings_via_File.call_by do |o|
        o.input_file = @input_file
        o.listener = @listener
      end
    end

    def _init_listener
      y = _errput_yielder
      @listener = -> * chan, & em_p do
        :expression == chan.first || fail
        nil.instance_exec y, & em_p
      end
      nil
    end

    def _errput_yielder
      @___errput_yielder ||= __build_errput_yielder
    end

    def __build_errput_yielder
      serr = @stderr
      ::Enumerator::Yielder.new do |s|
        serr.puts s
      end
    end

    # --
  end

  # ==
  # ==

  SUCCESS_EXITSTATUS_ = 0
  UNABLE_EXITSTATUS_ = 5

  # ==
end

  exit Skylab__BeautySalon__OneOffs__LaLaLaRuby___::CLI.new( ARGV, nil, $stdout, $stderr, [ $PROGRAM_NAME ] ).execute

# #born.
