module Skylab::System

  class Doubles::Stubbed_System::Recording

    class Rendering_

      # the "rendering" is a stateful session that manages details of
      # expressing the actual code content to the output stream. it is
      # either in a beginning, middle, or ended state (or similar); and
      # knows what the current indent level is at the moment.

      def initialize out
        @_do_holler_back = nil
        @_do_wrap_in_modules = nil
        @out = out
      end

      def receive_holler_back__ s
        s = s.gsub %r(\A\.#{ ::Regexp.escape ::File::SEPARATOR }), EMPTY_S_
        @_holler_back = s
        @_do_holler_back = true ; nil
      end

      def receive_wrap_in_module__ s_a
        if s_a.length.nonzero?
          @_do_wrap_in_modules = true
          @_wrap_in_modules = s_a ; nil
        end
      end

      def become_finished__
        @_mutable_current_margin = ""
        NIL
      end

      def express_the_opening
        if @_do_wrap_in_modules
          __output_the_opening_moduleishes
        elsif @_do_holler_back
          _holler_back
        end
        __express_the_opening_logic_code
        NIL
      end

      def __output_the_opening_moduleishes

        _a = remove_instance_variable :@_wrap_in_modules
        st = Common_::Stream.via_nonsparse_array _a
        s = st.gets
        begin
          indented_puts "module #{ s }"
          s = st.gets
          s || break
          _increase_indent
          express_blank_line
          redo
        end while above

        _increase_indent

        if @_do_holler_back
          _holler_back
        end

        express_blank_line
        indented_puts "Build = -> do"
        _increase_indent
        express_blank_line
        NIL
      end

      def _holler_back
        express_blank_line
        _s = remove_instance_variable :@_holler_back
        indented_puts "# (started as generated by #{ _s })"
        NIL
      end

      def __express_the_opening_logic_code

        __express_unindented_and_reindented <<-HERE
          o = Home_.lib_.system_lib::Doubles::Stubbed_System::MockSystem.begin

          o.command_category do |a|
            # in effect don't group commands into categories; there is just one category
            true
          end

          o.command_key do |a|
            # the entire command is its own key
            a
          end
        HERE
      end

      def __express_unindented_and_reindented mutable_big_s
        _String = Home_.lib_.basic::String
        _String.mutate_by_unindenting mutable_big_s
        st = _String.line_stream mutable_big_s
        begin
          line = st.gets
          line || break
          indented_puts line
          redo
        end while above
        NIL
      end

      def express_process_opening argv
        indented_puts "o.on #{ argv.inspect } do"
        NIL
      end

      def new_process_rendering
        Here_::ProcessRendering___.new self
      end

      def receive_done
        express_blank_line
        indented_puts "o.finish"
        while @_mutable_current_margin.length.nonzero?
          __decrease_indent
          indented_puts "end"
        end
        NIL
      end

      # --

      def _increase_indent
        @_mutable_current_margin.concat INDENT_BY__ ; nil
      end

      def __decrease_indent
        @_mutable_current_margin[ NEG_TAB_WIDTH___, TAB_WIDTH__ ] = EMPTY_S_ ; nil
      end

      def indented_puts s
        if s && BLANK_LINE_REGEXP !~ s
          s = "#{ @_mutable_current_margin }#{ s }"
        end
        @out.puts s
        NIL
      end

      def raw_puts s
        @out.puts s
      end

      def express_blank_line
        @out.puts ; nil
      end

      # ==

      BLANK_LINE_REGEXP = /\A$/
      INDENT_BY__ = '  '

      TAB_WIDTH__ = INDENT_BY__.length
      NEG_TAB_WIDTH___ = - TAB_WIDTH__
    end
  end
end
# #history: abstracted from core
