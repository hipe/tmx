@@grammar::ZIPP_ZAPP_BADOOZA

start::TopThing
    =
    payload:item_or_list
    ( s | $ )
    ;

item_or_list::ItemOrList
    =
    left:item right:[conjuncted]
    ;

conjuncted::Conjuncted
    =
    s
    and_or_or:( 'and' | 'or' )
    s ~
    item_or_list:item_or_list
    ;

item
    =
    | negated_function
    | tagging_matcher
    ;

negated_function::NegatedFunction
    =
    'not' s ~
    function_that_is_negated:(
        tagging_matcher
    )
    ;

tagging_matcher::TaggingMatcher
    =
    tagging_path:tagging_path
    modifying_suffix:[s modifying_suffix]
    ;

tagging_path::TaggingPath
    =
    surface_tag:surface_tag
    deep_selector:[deep_selector]
    ;

deep_selector::DeepSelector
    =
    left:deep_selector_component right:[deep_selector]
    ;

deep_selector_component::DeepSelectorComponent
    =
    ':' ~
    deep_selector_rough_stem:deep_selector_rough_stem
    ;

deep_selector_rough_stem
    =
    /[-a-zA-Z0-9_]+/ ~
    # the experimental idea is in the soft pass we'll determine whether
    # it's a value or a sub-tag (we may not distinguish).
    # expert mode will be quoted strings #wish [#707.E]
    ;

surface_tag::SurfaceTag
    =
    '#' ~ tag_stem:tag_stem
    ;

tag_stem
    =
    /[a-z]+/ ~
    # (the above is a very temporary, over-simplified placeholder)
    ;

modifying_suffix
    =
    | in_suffix
    | with_or_without_value
    ;

in_suffix::InSuffix
    =
    'in' s ~ in_suffix_payload:in_suffix_payload
    ;

in_suffix_payload
    =
    | list_of_values_for_in_suffix
    | hacky_regex_friendo
    | numeric_range
    ;

list_of_values_for_in_suffix::ListOfValuesForInSuffix
    =
    '(' ~
    values_for_in_suffix:values_for_in_suffix
    s
    ')' ~
    ;

values_for_in_suffix
    =
    s
    left:atomic_value
    ~
    right:[values_for_in_suffix]
    ;

numeric_range::NumericRange
    =
    begin_number:easy_number
    '..' ~
    # (above we might expand to allow '...' too alla ruby exclusive range)
    end_number:easy_number
    ;

easy_number::EasyNumber
    =
    integer_part: /-?[0-9]+/
    float_part: [ '.' /[0-9]+/ ~ ]
    ;

hacky_regex_friendo::HackyRegexFriendo
    =
    '/' ~
    hacky_regex_payload: /[^\0]+/
    # yikes - match one or more characters that is not the null byte! (this
    # includes matching the ending delimiter that is expected to be there!)
    ;

atomic_value
    =
    /[-a-zA-Z0-9_.]+/ ~
    ;
    # for one thing, compare to `tag_stem` above .. unify these near [#703.C].
    # for another thing, at writing we realized [#707.E] string quoting is a
    # modality concern and so something we should not want here. (consider,
    # for example, that we don't generally need it from the shell, right?)
    # but we still have to detect the ')' and we don't want our own escaping
    # rules so we're sidestepping this for a while longerr ..

with_or_without_value::WithOrWithoutValue
    =
    with_or_without:( 'without' | 'with' )
    # (the above isn't pretty on the AST side if you do it the way you want)
    s ~
    'value'
    ;

s = '\0' ;
# (above is NULL_BYTE_)


# #history-A.6: introduce the "in regex" hacky construct
# #history-A.5: introduce the "in numeric range" construct
# #history-A.4: introduce the `in` keyword for value lists
# #history-A.3: introduce `with value`, `without value`
# #history-A.2: introduce negation
# #history-A.1: add deep selectors (exact match)
# #born.
