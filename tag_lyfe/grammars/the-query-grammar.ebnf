@@grammar::ZIPP_ZAPP_BADOOZA

start::TopThing
    =
    payload:item_or_list
    ( s | $ )
    ;

item_or_list::ItemOrList
    =
    left:item right:[conjuncted]
    ;

conjuncted::Conjuncted
    =
    s
    and_or_or:( 'and' | 'or' )
    s ~
    item_or_list:item_or_list
    ;

item
    =
    | negated_function
    | tagging_matcher
    ;

negated_function::NegatedFunction
    =
    'not' s ~
    function_that_is_negated:(
        tagging_matcher
    )
    ;

tagging_matcher::TaggingMatcher
    =
    surface_tag:surface_tag
    deep_selector:[deep_selector]
    ;

deep_selector::DeepSelector
    =
    left:deep_selector_component right:[deep_selector]
    ;

deep_selector_component::DeepSelectorComponent
    =
    ':' ~
    deep_selector_rough_stem:deep_selector_rough_stem
    ;

deep_selector_rough_stem
    =
    /[-a-zA-Z0-9_]+/ ~
    # the experimental idea is in the soft pass we'll determine whether
    # it's a value or a sub-tag (we may not distinguish).
    # expert mode will be quoted strings #wish [#707.E]
    ;

surface_tag::SurfaceTag
    =
    '#' ~ tag_stem:tag_stem
    ;

tag_stem
    =
    /[a-z]+/ ~
    # (the above is a very temporary, over-simplified placeholder)
    ;

s = '\0' ;
# (above is NULL_BYTE_)


# #history-A.2: introduce negation
# #history-A.1: add deep selectors (exact match)
# #born.
