@@grammar::DERFOUS_NERFOUS_BERFOUS

start
    =
    document
    $
    ;

document
    =
    | document_with_one_or_more_taggings
    | document_with_no_taggings
    ;

document_with_one_or_more_taggings::TopThing
    =
    head_sep:[tagging_separator]
    first_tagging:tagging ~
    more_taggings: {
      tagging_separator
      tagging ~
    }
    tail_garbage: { /./ }
    ;

document_with_no_taggings::TopThing
    =
    head_sep:()
    first_tagging:()
    more_taggings:()
    tail_garbage: { /./ }
    ;

tagging_separator::TaggingSeparator
    # imagine 'dark' characters and 'light' characters. lights are separators
    # (like the space character) and dark are all the rest.
    =
    {
      [
        # if you're going to match a run of dark characters, they cannot
        # *from this begnning point* be a tagging
        !tagging
        { ! sep_chars /./ }+
        # (but note that tagging-looking runs of characters *can* occur in
        #  the *middle* of a dark run.)
      ]
      sep_chars
    }+
    # you can't escape out of the above "loop" until you find one of the
    # above phrases (iterations) that is followed by a tagging
    &tagging
    ;

sep_chars
    =
    /[ (]+/
    ;

tagging::WahooTagging
     =
    '#'
    head_stem: /[a-zA-Z0-9_][-a-zA-Z0-9_]*/
    any_tail: { ':' non_head_tag_surface_name }
    ;

non_head_tag_surface_name
    =
    | non_head_tag_surface_name_as_is
    | double_quoted_string
    ;

non_head_tag_surface_name_as_is::NonHeadTagSurfaceNameAsIs
    =
    /[a-zA-Z0-9_][-a-zA-Z0-9_']*/  # NOTE like head_stem but PLUS "'"
    ;

double_quoted_string::DoubleQuotedString
    =
    '"' inside:{ double_quoted_piece } '"'
    ;

double_quoted_piece
    =
    | escaped_double_quote
    | not_a_double_quote
    ;

escaped_double_quote::EscapedDoubleQuote
    =
    '\\"'
    ;

not_a_double_quote::NotDoubleQuote
    =
    /[^"]/
    ;

# #history-A.2: introduce double-quoted tag name components
# #history-A.1: refactored to get edge cases. had to get rid of cuts
# #born.
