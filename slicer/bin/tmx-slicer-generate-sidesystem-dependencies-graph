#!/usr/bin/env ruby -w

require 'skylab/slicer'
require 'skylab/tmx'

module Skylab::Slicer

  class SS_Dep__ < Home_::Modality_Adapters_::CLI  # is :[#001].

    def initialize( * )

      @a = []
      @h = {}
      super
    end

    def execute
      if @argv.length.zero?
        __go
      else
        express_usage
      end
    end

    def __go

      @stdout.puts "digraph {"

      _st = ::Skylab::TMX.to_reflective_sidesystem_stream

      _st.each do | ss |

        @h[ ss.const ] = ss
        @a.push ss
      end

      graph_viz_labeller = Home_::Output_Adapters_::Graph_Viz::Labeller.new(
        @stdout )

      _ = Home_.lib_.TMX

      _st = _::Models::Sigil.via_reflective_sidesystem_array_( @a ).to_stream
      h = {}
      _st.each do | s10n |

        h[ s10n.stem ] = s10n.sigil

        graph_viz_labeller << s10n
      end

      @_sigils = h

      ___walk_each_sidesystem

      @stdout.puts "}"

      NIL_
    end

    def ___walk_each_sidesystem

      @a.each do | ss |
        ___do_sidesystem ss
      end
      NIL_
    end

    def ___do_sidesystem ss

      if ss.has_library_node
        ___do_library_file ss
      end
      NIL_
    end

    def ___do_library_file ss

      if ss.inferred_dependencies
        ___go_deps ss
      else
        @stderr.puts "(library node with no sidesystems?, skipping - #{ ss.norm })"
      end
      NIL_
    end

    def ___go_deps ss  # etc

      sigils = @_sigils

      lhs = "  #{ sigils.fetch ss.stem } -> "

      ss.inferred_dependencies.each do | sym |

        @stdout.puts "#{ lhs }#{ sigils.fetch @h.fetch( sym ).stem }"
      end
      NIL_
    end
  end
end

Skylab::Slicer::SS_Dep__.new( ::ARGV, nil, $stdout, $stderr ).execute
