require_relative 'my-test-support'

module Skylab::Flex2Treetop::MyTestSupport

  describe "[f2] CLI" do

    extend Top_TS_
    use :want_stdout_stderr

    # ->

      it "0    with no args - explain what's expected" do
        invoke
        want :styled, /\Aexpecting <action\>\z/
        want_usage_and_invite
      end

      it "1.2  with one nonsensical option - explain option not valid" do
        invoke '-x'
        want %r(\binvalid option: -x\b)i
        want_invite
      end

      it "2.4   with the -h help flag - display help screen" do
        invoke 'translate', '-h'
        want_full_help_screen
      end

      def want_full_help_screen

        on_stream :e

        want :styled, /\busage: #{ ::Regexp.escape _program_name } .+#{
          }\[-v\] <flex-file> <output-path>\z/

        o = flush_to_content_scanner
        o.want_nonblank_line
        o.want_blank_line

        o.want_header :options

        _count = o.skip_lines_that_match %r(\A[[:space:]])
        ( 12 .. 17 ).should be_include _count

        want_result_for_success
      end

      it "1    ping simple" do

        invoke 'ping'
        want 'hello from flex2treetop.'
        want_no_more_lines
        @exitstatus.should eql :hello_from_flex2treetop
      end

      it "2    ping with argument" do

        invoke 'ping', 'xx'
        want 'helo:(xx)'
        @exitstatus.should eql :_cheeky_monkey_
      end

      it "2.1  with one giberrsh arg - explain that file is not found" do

        @stdin_for_want_stdout_stderr = _mock_stdin

        invoke 'trans', 'not-there.txt', '-'
        want :styled, %r(\bno such <flex-file> - not-there\.txt\z)
        want_action_invite
      end

      it "1.4  read flex file, write treetop grammar to stdout" do

        @stdin_for_want_stdout_stderr = _mock_stdin

        invoke 'trans', fixture_flex_( :mini ), '-'
        __want_all_this
      end

      it "[tmx] integration (stowaway)", TMX_CLI_integration: true do

        Home_::Autoloader_.require_sidesystem :TMX

        cli = ::Skylab::TMX.test_support.begin_CLI_expectation_client

        cli.invoke 'flex2treetop', 'ping'

        cli.want_on_stderr "hello from flex2treetop.\n"

        cli.want_succeed_under self
      end

      def __want_all_this

        @line_stream_for_want_line =

          sout_serr_line_stream_for_contiguous_lines_on_stream :o

        extend TestSupport_::Want_line::Test_Context_Instance_Methods

        next_line.should match %r(\A# Autogenerated by fle)

        newline = "\n"
        next_line.should eql newline
        next_line.should eql "# from flex name definitions\n"
        next_line.should eql newline
        next_line.should eql "rule escape__of_lexer__\n"
        next_line.should match %r(\A  unicode__of_lexer__ / )
        next_line.should eql "end\n"

        @exitstatus.should eql :translated
      end

      def invoke * argv
        using_want_stdout_stderr_invoke_via_argv argv
      end

      def subject_CLI
        Home_::CLI
      end

      define_method :invocation_strings_for_want_stdout_stderr, -> do
        a =  nil
        -> do
          a ||= [ _program_name ]
        end
      end.call

      def want_usage_and_invite
        want_usage
        want_invite
      end

      def want_usage
        want :styled, "usage: #{ _program_name } <action> [..]"
      end

      def want_invite
        want :styled, "use '#{ _program_name } -h' for help"
        want_fail
      end

      def want_action_invite
        want :styled, "use '#{ _program_name } translate -h' for help"
        want_fail
      end

      def result_for_failure_for_want_stdout_stderr
        Home_::Brazen_::CLI_Support::GENERIC_ERROR_EXITSTATUS
      end

      define_method :_program_name, -> do
        x = 'f2tt'
        -> do x end
      end.call

      def _mock_stdin
        Mock_interactive_stdin_[]
      end

      # <-

  end
end
