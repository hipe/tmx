#!/usr/bin/env ruby -w

# (this started as an alias (called "snap" just because it's monosyllabic
# and available and i suppose it's evocative of "snapshot") that simply
# did something like this:
#
#     alias snap="git add file1 ; git add file2 ; git ci -m '(hardcoded msg)'"
#
# that was it. two hardcoded file paths, add them and commit them. it was
# used for "three laws" development (write ONE test that fails, write code
# that passes ONLY that test, commit, repeat). anyway, we liked the feeling
# of flow that came from it so we're blowing it up into a script here.)

require 'skylab/common'

class TMX_snap

  # -
    # -

      def initialize * five
        argv, _, @sout, @serr, @program_name_string_array = five
        @argv = Common_::Polymorphic_Stream.via_array argv
      end

      def execute
        bc = to_bound_call
        if bc
          x = bc.receiver.send bc.method_name, * bc.args
          if ! x.nil?
            @stderr.puts "(don't - #{ x.class })"
          end
        end
        @exitstatus
      end

      def to_bound_call
        if @argv.no_unparsed_exists
          @exitstatus = NOPE__
          @serr.puts "missing argument - expecting <operation>"
          _express_usage

        elsif HELP_RX__ =~ @argv.current_token
          @exitstatus = YEP__
          __express_help

        elsif __parse_operation_name
          @exitstatus = YEP__
          _flush_bound_call_via_operation_method_name

        elsif __this_hacky_thing
          @exitstatus = YEP__
          _flush_bound_call_via_operation_method_name

        else
          @exitstatus = NOPE__
          __bork_about_unknown_operation
        end
      end

      def __parse_operation_name

        tok = @argv.current_token
        k = Common_::Name.via_slug( tok ).as_lowercase_with_underscores_symbol
        m = OPERATIONS__[ k ]
        if m
          @argv.advance_one
          @__operation_symbol = k
          @_operation_slug = tok
          @_operation_method_name = m
          ACHIEVED_
        else
          UNABLE_
        end
      end

      def __bork_about_unknown_operation

        tok = @argv.current_token
        @serr.puts "unrecognized operation: #{ tok.inspect }"
        @serr.puts "expecting #{ _say_available_operations }"
        __invite_to_help
      end

      def _express_usage

        _these = _say_available_operations

        @serr.puts "usage: #{ _program_name } #{ _these } [..]"

        NOTHING_
      end

      def __express_help

        _express_usage

        io = @serr
        io.puts

        io.puts "decription: experiment.."

        io.puts
        io.puts "(try -h after the individual operations)"

        NOTHING_
      end

      def _say_available_operations

        _st = __to_operation_slug_stream

        _these = _st.join_into_with_by( "", " | " ) { |s| s }

        "{ #{ _these } }"
      end

      def __to_operation_slug_stream
        Common_::Stream.via_nonsparse_array OPERATIONS__.keys do |sym|
          Common_::Name.via_lowercase_with_underscores_symbol( sym ).as_slug
        end
      end

      # --

      OPERATIONS__ = {
        list: :__at_list,
        add: :__at_add,
        commit: :__at_commit,
      }

      DESCRIPTIONS__ = {
        add: :__describe_add,
        list: :__describe_list,
        commit: :__describe_commit,
      }

      # --

      def __describe_list
        io = @serr
        io.puts "usage: #{ _program_name } list"
        io.puts
        io.puts "description: lists the lines of the file (plus \"metadata\")"
        NIL
      end

      def __at_list
        if @argv.no_unparsed_exists
          if _resolve_file_open_for_read
            __do_list
          end
        else
          __maybe_operation_help
        end
      end

      def __do_list

        down_lines = @sout
        fs = @_filesystem
        serr = @serr
        up_lines = @_file_io

        say = -> do
          s = "and "
          say = -> { s }
          "file in #{ @_file } not found: "
        end

        begin
          line = up_lines.gets
          line || break
          line.chomp!

          if fs.exist? line
            down_lines.puts line
            redo
          end

          serr.puts "(#{ say[] }#{ line })"

          redo
        end while above
        NIL
      end

      # --

      def __describe_add
        io = @serr
        io.puts "usage: #{ _program_name } add <file>"
        io.puts
        io.puts "description: add the <file> (line) to the #{ @_file } file"
        NIL
      end

      def __at_add

        if @argv.no_unparsed_exists

          _bork_about_expecting_argument '<file>'

        elsif HELP_RX__ =~ @argv.current_token

          _when_operation_help_requested

        elsif _resolve_file_open_for ::File::CREAT | ::File::RDWR | ::File::APPEND

          __do_add
        end
      end

      def __do_add

        # (sorting the list would be fun but meh)

        count = 0
        argv = @argv
        io = @_file_io
        begin
          _anything = argv.gets_one
          io.puts _anything
          count += 1
        end until argv.no_unparsed_exists
        io.close

        @serr.puts "(added #{ count } lines to #{ io.path })"

        NIL
      end

      # --

      def __describe_commit
        @serr.puts "(..)"
        NIL
      end

      def __this_hacky_thing

        # if there is one token left in the ARGV and it "looks like" a
        # commit message (see regex), interpret this to be a shorthand for
        # `commit`. (incidentally this use case is the exact inspiration for
        # making this one-off script instead of just using the simple alias
        # is so that we could annonate our "snap" commits.)
        #
        # eek - peek the length of the remainder of the buffer (ARGV)
        # before you `gets` it.

        eek = @argv
        d = eek.current_index
        s_a = eek.array_for_read
        if d == s_a.length - 1

          tok = @argv.current_token

          if COMMIT_MESSAGE_WIDE_RX__ =~ tok && HELP_RX__ !~ tok

            @_commit_message = @argv.gets_one
            @_operation_method_name = :_try_commit
            ACHIEVED_
          end
        end
      end

      def __at_commit

        if @argv.no_unparsed_exists

          _bork_about_expecting_argument '<commitmsg>'

        elsif HELP_RX__ =~ @argv.current_token

          _when_operation_help_requested

        else
          @_commit_message = @argv.gets_one
          if @argv.no_unparsed_exists
            _try_commit
          else
            _bork_about_unexpected_argument_for_operation
          end
        end
      end

      def _try_commit  # assume at least one token.

        if _resolve_file_open_for_read
          __do_commit
        end
      end

      def __do_commit

        files_ok = []
        files_not_ok = nil

        up_io = @_file_io
        fs = @_filesystem
        begin
          line = up_io.gets
          line || break
          line.chomp!
          if fs.exist? line
            files_ok.push line
            redo
          end
          ( files_not_ok ||= [] ).push line
          redo
        end while above
        up_io.close

        if files_not_ok
          __when_files_not_ok files_not_ok

        elsif files_ok.length.zero?
          @exitstatus = NOPE__
          @serr.puts "(no files to commit)"
          NIL
        else
          _msg = remove_instance_variable :@_commit_message
          __commit_money _msg, files_ok
        end
      end

      def __when_files_not_ok files
        @exitstatus = NOPE__
        @serr.puts "(won't commit because these files don't exit)"
        files.each do |file|
          @sout.puts file
        end
        @serr.puts "(you MIGHT be able to fix this with this line:)"
        @serr.puts "    #{ _program_name } list > x ; mv x #{ @_file }"
        NIL
      end

      def __commit_money msg, files

        require 'shellwords'

        ok = nil
        git = "git"

        money = -> * s_a do
          s_a.unshift git
          _eew = [ * s_a[ 0 .. -2 ], ::Shellwords.shellescape( s_a.last ) ]
          @serr.puts "  >>>> #{ _eew.join ' ' }"  # SPACE_

          _EEEGADS s_a
        end

        files.each do |file|
          ok = money[ "add", file ]
          ok || break
        end

        if ok
          money[ "commit", "-m", msg ]
        end

        if ! ok
          @exitstatus ||= NOPE__
        end
        NIL
      end

      def _EEEGADS command_s_a

        # command_s_a.unshift 'echo'  # hackish way to get dry run

        guy = command_s_a.first  # ..

        o_r, o_w = ::IO.pipe
        e_r, e_w = ::IO.pipe

        pid = ::Kernel.spawn( * command_s_a, out: o_w, err: e_w )

        o_w.close
        e_w.close

        ok = true
        s = e_r.gets
        if s
          ok = false
          begin
            @serr.puts "  <<<< (#{ guy } err:) #{ s }"
            s = e_r.gets
          end while s
        else
          s = o_r.gets
          if s
            begin
              @serr.puts "  <<<< (#{ guy } out:) #{ s }"
              s = o_r.gets
            end while s
          end
        end

        ::Process.wait pid
        _status = $?
        d = _status.exitstatus

        if d.nonzero?
          ok = false
        end

        @exitstatus = d

        ok
      end

      # --

      def _resolve_file_open_for_read
        _resolve_file_open_for ::File::RDONLY
      end

      def _resolve_file_open_for d
        @_file_io = @_filesystem.open @_file, d
        ACHIEVED_
      rescue ::Errno::ENOENT => e
        @serr.puts e.message.sub( ' @ rb_sysopen', '' )  # EMPTY_S_
        @serr.puts "(use `#{ _program_name } add` to add files)"
        @exitstatus = NOPE__
        UNABLE_
      end

      def _common_init
        @_file = '.snap'
        @_filesystem = ::File
        NIL
      end

      # --

      def _bork_about_expecting_argument moniker

        @serr.puts "expecting #{ moniker } for #{ @_operation_slug }"
        _invite_to_operation_help
      end

      def __maybe_operation_help  # assume nonzero-length argv

        if HELP_RX__ =~ @argv.current_token
          _when_operation_help_requested
        else
          _bork_about_unexpected_argument_for_operation
        end
      end

      def _bork_about_unexpected_argument_for_operation

        @serr.puts "unexpected argument #{ @argv.current_token.inspect } #{
          }for #{ @_operation_slug }"

        _invite_to_operation_help
      end

      def _invite_to_operation_help
        @serr.puts "try `#{ _program_name } #{ @_operation_slug } -h`"
        NIL
      end

      def _when_operation_help_requested

        @argv.advance_one

        m = DESCRIPTIONS__[ @__operation_symbol ]
        if m
          send m
        else
          @serr.puts "(no help/description available for #{ @_operation_slug }"
        end
        NIL
      end

      def __invite_to_help

        @serr.puts "try `#{ _program_name } -h`"
        # (skip this for now - it doesn't add anything)
        UNABLE_
      end

      def _program_name
        ::File.basename @program_name_string_array.last
      end

      def _flush_bound_call_via_operation_method_name
        _m = remove_instance_variable :@_operation_method_name
        _common_init
        Common_::Bound_Call[ nil, self, _m ]
      end

      # --
    # -

    # ==

    ACHIEVED_ = true
    COMMIT_MESSAGE_WIDE_RX__ = %r([^ ][ ]+[^ ])
    HELP_RX__ = %r(\A--?h(?:e(?:l(?:p)?)?)?\z)
    NOPE__ = 5
    NOTHING_ = nil
    UNABLE_ = false
    YEP__ = 0

    # ==

  # -

  Common_ = ::Skylab::Common
end

if ::File.basename( $PROGRAM_NAME ) == ::File.basename( __FILE__ )

  d = TMX_snap.new(
    ARGV, $stdin, $stdout, $stderr, [ $PROGRAM_NAME ]
  ).execute

  if d.nonzero?
    $stderr.puts "(exitstatus: #{ d })"
  end

  exit d
end
