#!/usr/bin/env ruby -w

      work = nil
      program = -> argv, i, o, e, pn_a do

        if argv.length.zero?

          work[ i, o ]

        else

          o = ::Enumerator::Yielder.new do | s |
            e.puts s
          end

          if 1 == argv.length && %w( -h --help ).include?( argv.first )

o << "synopsis: filter the upstream such that rather than using newlines, the"
o << "          items are separated with spaces, while still streaming."
o << nil
o << "          (there is some clever shell way of doing this - this work is"
o << "          an :+#idea-kitestring on finding that.)"
o << nil
o << "          (UPDATE): using `awk` in the below manner is nearly equivalent,"
o << "          and probably better because `awk` is so ubiquitously available."
o << "          compare ours:"
o << nil
o << "              echo \"A\\nB\\nC\" | [this utility]  # => \"A B C\""
o << nil
o << "          and awk:"
o << nil
o << "              echo \"A\\nB\\nC\" | awk 'BEGIN{ORS=\" \"} {print}'  # => \"A B C \""
o << nil
o << "          whereas the above `awk` command puts the space (output record"
o << "          separator) after *every* item (terminator semantics); the"
o << "          subject utility employs *separator* semantics where there is"
o << "          a space *between* each item but not after the final item."
o << "          for all of our target use cases, the `awk` form is sufficient."
o << "          but the subject utility is here in case it is ever not."

            es = 0
          else
            es << "unexpected: #{ argv.first.inspect }"
            es = 5
          end

          _pn = [ ::File.basename( pn_a.first ), * pn_a[ 1 .. -1 ] ].join ' '

          o << "usage: #{ _pn }"

          es
        end
      end

      work = -> up, down do

        _SP = ' '

        p = -> s do

          down.write s
          p = -> s_ do
            down.write "#{ _SP }#{ s_ }"
          end
        end

        begin
          s = up.gets
          s or break
          s.chomp!
          p[ s ]
          redo
        end while nil

        down.write "\n"

        0
      end

if __FILE__ == $PROGRAM_NAME

  exit program[ ARGV, $stdin, $stdout, $stderr, [ $PROGRAM_NAME ] ]
else
  Skylab::TMX_no_line_breaks = program  # (comply name to [#br-083])
end
