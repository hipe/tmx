# generated by bnf2treetop.  edits may be lost.
#
# This nerkiss was originally generated directly from specifications
# present in graph-viz documetnation
# (see input-adapters-/graph-viz/_source/dot-language.bnf).
#
# It was then modified in the following ways (and hopefully you'll appreciate
# the self-reflexive irony of the fact that it pained me greatly to
# modify the generated grammar):
#
# (1) Required and optional whitespace (s and s?) were added in what is
#     hopefully a regular way, but this is a point of some experimentation
#     (note that parsing expressing grammars lack a tokenizing pass).
# (2) Logic with whitespace vis-a-vis a statement_separator was non-straightfwd.
# (3) The order of symbols in a set of alternatives was changed.
# (4) (non syntactic): Semantic labels were added to rule components in ways
#     that were sometimes regular and sometimes not.
# (5) added content: grouping to a_list for sexp convenience
# (6) turned 'equals stmt' into its own rule with labels

module Skylab::TanMan::Models_::DotFile

  grammar DotLanguage

    include HandMadeSupplement
    rule graph
      s? ('strict' s)? ('graph' / 'digraph') (s id)? s? '{' s? stmt_list s? '}' s? <SyntaxNodes::Graph>
    end
    rule stmt_list
      # it's more complicated than below (generated), b/c see stmt_separator
      # (stmt ';'? stmt_list?)?
      (stmt tail:(stmt_separator stmt_list)? stmt_separator?)?
    end
    rule stmt_separator
      s? ';' s? / s
      { def _to_final_parse_tree_ ; text_value end }
    end
    rule stmt
      # The order as generated (below) won't work for us because
      # the "node_id" component of "node_stmt" swallows everything.
      # We hence change the order so that "node_stmt" is at the end.
      # node_stmt / edge_stmt / attr_stmt / id '=' id / subgraph
      attr_stmt / edge_stmt / equals_stmt / subgraph / node_stmt
    end
    rule attr_stmt
      agent:('graph' / 'node' / 'edge') attr_list
    end
    rule attr_list
      s? '[' s? content:a_list? ']' attr_list:attr_list?
    end
    rule a_list
      s? content:( id s? equals:('=' s? id s?)? ) ','? a_list:a_list?
    end
    rule edge_stmt
      agent:(node_id / subgraph) edge_rhs attr_list:attr_list?
    end
    rule edge_rhs
      s? edgeop s? recipient:(node_id / subgraph) edge_rhs:edge_rhs?
    end
    rule equals_stmt
      lhs:id s? '=' s? rhs:id
    end
    rule node_stmt
      node_id attr_list:attr_list?
    end
    rule node_id
      id port:port?
    end
    rule port
      ':' id (':' compass_pt)? / ':' compass_pt
    end
    rule subgraph
      ('subgraph' id:id?)? '{' stmt_list '}'
    end
    rule compass_pt
      ('n' / 'ne' / 'e' / 'se' / 's' / 'sw' / 'w' / 'nw' / 'c' / '_')
    end
  end
end
