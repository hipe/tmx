#!/usr/bin/env ruby -w

Skylab = ::Module.new

class Skylab::Stack

  Models_ = ::Module.new
  Models_::Stack = self

  # ~ temporary (until either [br] ACS settles or we become self-supporting)

  class Models_::Stack

    def initialize *six

      @argv, @stdin, @stdout, @stderr, @pn_s_a, @_filesystem = six

      y = nil
      @_oes_p = -> * i_a, & ev_p do

        y ||= ::Enumerator::Yielder.new do | s |
          @stderr.puts s
        end

        _expag.calculate y, & ev_p
      end
    end

    def execute

      argv = remove_instance_variable :@argv

      if argv.length.zero?
        _do_execute_operation :list

      elsif /\A-(?:h|-he(?:lp?))?\z/ =~ argv.first
        __help

      else

        # manually parse the case of a leading switch-like or argument-like
        # integer N to be shorthand for "top N", i.e list the topmost N

        md = /\A -?  (?<integer> \d+ ) \z/x.match argv.first
        if md
          argv = [ 'top', md[ :integer ], * argv[ 1 .. -1 ] ]
        end

        sym = argv.first.intern
        if _can_execute_operation sym
          argv.shift
          _do_execute_operation sym, argv
        else
          @stderr.puts "unrecognized operation '#{ argv.first }'"
          __invite
        end
      end
    end

    def __invite
      @stderr.puts "use '#{ program_name } -h' for help"
      5
    end

    def __help

      io = @stderr
      sym_a = _operation_names

      io.puts "description: manage the lines of a file like a stack."
      io.puts "             (for simple, short-term task management)"

      io.puts

      io.puts "usage: #{ program_name } { #{ sym_a * ' | ' } } [opts] [args]"

      sym_a.each do | sym |

        _m = _operation_method_for sym

        _proc = send _m

        _params = _proc.parameters

        a = _params.reduce [] do | m, ( _c, sym_ ) |

          _expag.calculate do
            m.push par sym_
          end

          m
        end

        if a.length.nonzero?
          _args = " #{ a * ' ' }"
        end

        io.puts
        io.puts "       #{ program_name } #{ sym }#{ _args }"

      end
      0
    end

    def program_name
      ::File.basename @pn_s_a.last
    end

    def _operation_names
      rx = /\A__((?:[^_]|_(?=[^_]))+)__component_operation\z/
      self.class.instance_methods( false ).reduce [] do | m, i |
        md = rx.match i
        if md
          m.push md[ 1 ].intern
        end
        m
      end
    end

    def _can_execute_operation sym
      respond_to? _operation_method_for sym
    end

    def _do_execute_operation sym, args=nil

      _proc = send _operation_method_for sym
      x = _proc.call( * args )
      if x
        if true == x
          0
        elsif x.respond_to? :gets
          while line = x.gets
            @stderr.puts line
          end
          0
        else
          x
        end
      else
        5
      end
    end

    def _operation_method_for sym
      :"__#{ sym }__component_operation"
    end

    def _expag
      @___expag ||= Expression_Agent___.new
    end

    attr_reader(
      :stderr,
      :stdout,
    )
  end

  class Expression_Agent___

    alias_method :calculate, :instance_exec

    def ick x
      x.inspect
    end

    def par sym
      "<#{ sym.id2name.gsub UNDERSCORE_, DASH_ }>"
    end

    alias_method :val, :ick

    DASH_ = '-'
    UNDERSCORE_ = '_'
  end

  # ~

  class Models_::Stack

    def __viz__component_operation

      -> * tons_of_args do

        p = method :_to_item_line_stream
        require 'skylab/tan_man'

        _ = ::Skylab::TanMan::Operations_::StackViz.new(
          tons_of_args, p, self ).execute

        _
      end
    end

    def __push__component_operation

      -> * text do
        io = _read_writable_IO
        if io
          io.puts text.join SPACE_
          io.close
          ACHIEVED_
        end
      end
    end

    def __pop__component_operation

      -> do
        io = _read_writable_IO
        if io
          ___do_pop io
        end
      end
    end

    def ___do_pop io

      bytesize_to_keep = 0 ; bytesize = 0 ; old_topmost_line = nil

      begin
        line = io.gets
        line || break
        new_topmost_line = old_topmost_line
        old_topmost_line = line
        bytesize_to_keep = bytesize
        bytesize += line.bytesize
        redo
      end while nil

      express_popped = -> do

        # the line that was just popped is written as-is to stdout so that
        # the user can redirect this output (easily) to for example a "DID"
        # file for use in informing a near future commit message.

        if old_topmost_line
          @stdout.puts old_topmost_line
        end
      end

      if bytesize_to_keep.zero?

        express_popped[]

        @_oes_p.call :info, :expression, :removing_file do | y |
          y << "(stack cleared. removing file.)"
        end

        io.close

        @_filesystem.unlink io.path
        # (result should be 1 - the number of files removed)

        ACHIEVED_
      else

        express_popped[]

        new_topmost_line.chomp!  # EEK/meh

        @_oes_p.call :info, :expression, :current_top do | y |
          y << "(new top: #{ new_topmost_line })"
        end

        io.truncate bytesize_to_keep
        io.close
        ACHIEVED_
      end
    end

    def __list__component_operation

      -> do
        st = _to_item_line_stream
        if st
          d = 0
          Stream__.new do
            line = st.gets
            if line
              "#{ d += 1 } #{ line }"
            end
          end
        else
          _when_stack_empty
        end
      end
    end

    def __top__component_operation

      -> num=nil do

        if num
          md = /\A[0-9]+\z/.match num
          if md
            d = num.to_i
          else
            @_oes_p.call :error, :message, :invalid_input do |y|
              y << "must be a positive integer - #{ num.inspect }"
            end
          end
        else
          d = 1
        end

        if d
          __go_top d
        else
          UNABLE_
        end
      end
    end

    def __go_top d

      # (we have read the whole file already, there is no need to close it.)

      st = _to_item_line_stream
      if st
        Stream__.new do
          if d.nonzero?
            line = st.gets
            if line
              d -= 1
              line
            end
          end
        end
      else
        _when_stack_empty
      end
    end

    def _when_stack_empty
      @_oes_p.call :info, :expression, :stack_empty do |y|
        y << "(stack empty.)"
      end
      Stream__.new do
      end
    end

    def _to_item_line_stream
      io = _readable_IO
      if io
        stack = []
        while line = io.gets
          stack.push line
        end
        d = stack.length
        Stream__.new do
          if d.nonzero?
            d -= 1
            stack.fetch d
          end
        end
      end
    end

    def __swap__component_operation

      -> item_number_A, item_number_B do
        io = _read_writable_IO
        if io
          o = Swap___.new( & @_oes_p )
          o.IO = io
          o.number_A = item_number_A
          o.number_B = item_number_B
          o.execute
        end
      end
    end

    def _readable_IO
      begin
        @_filesystem.open _path, ::File::RDONLY
      rescue ::Errno::ENOENT => e
        @_oes_p.call :info, :expression, :no_file do | y |
          y << e.message
        end
        UNABLE_
      end
    end

    def _read_writable_IO

      @_filesystem.open _path, ::File::CREAT | ::File::RDWR | ::File::APPEND
    end

    def _path
      '.stack'  # etc
    end

    class Stream__ < ::Proc
      alias_method :gets, :call
    end

    class Swap___
      def initialize & oes_p
        @_oes_p = oes_p
      end
      attr_writer(
        :IO,
        :number_A,
        :number_B,
      )
      def execute

        ok = _validate :@_number_A, @number_A, :number_A
        ok &&= _validate :@_number_B, @number_B, :number_B
        ok &&= __normalize
        if ok
          __work
        else
          @IO.close
          ok
        end
      end

      def _validate ivar, s, sym
        md = RX__.match s
        if md
          d = md[0].to_i
          if 0 == d
            @_oes_p.call :error, :expression, :invalid_digit do | y |
              y << "#{ par sym } cannot be less than one (had #{ ick d })"
            end
            UNABLE_
          else
            instance_variable_set ivar, md[0].to_i
            ACHIEVED_
          end
        else
          @_oes_p.call :error, :expression, :invalid_digit do | y |
            y << "#{ par sym } doesn't look like positive integer: #{ ick s }"
          end
          UNABLE_
        end
      end
      RX__ = /\A[0-9]+\z/

      def __normalize

        ok = __normalize_lesser_vs_greater
        ok && __init_raw_lines
        ok && __normalize_greater_vs_max
      end

      def __normalize_lesser_vs_greater

        @_lesser = remove_instance_variable :@_number_A
        @_greater = remove_instance_variable :@_number_B

        case @_lesser <=> @_greater
        when -1
          @_did_switch = false
          ACHIEVED_
        when 0
          __when_same
        when 1
          @_did_switch = true
          d = @_greater
          @_greater = @_lesser
          @_lesser = d
          ACHIEVED_
        end
      end

      def __when_same
        @_oes_p.call :error, :expression, :wont_swap_same do | y |
          y << "won't swap the same number"
        end
        UNABLE_
      end

      def __init_raw_lines
        raw_lines = []
        io = @IO
        while line = io.gets
          raw_lines.push line
        end
        @_raw_lines = raw_lines ; nil
      end

      def __normalize_greater_vs_max

        if @_raw_lines.length < @_greater
          __when_too_large
        else
          ACHIEVED_
        end
      end

      def __when_too_large

        had_d = @_greater
        limit_d = @_raw_lines.length
        if @_did_switch
          sym = :number_A
          your = "your "
        else
          sym = :number_B
        end

        @_oes_p.call :error, :expression, :too_large do | y |
          y << "#{ your }#{ par sym } cannot be greater than #{
            }#{ val limit_d } (had #{ val had_d })"
        end

        UNABLE_
      end

      def __work

        offset = @_raw_lines.length
        d = offset - @_lesser
        d_ = offset - @_greater
        tmp = @_raw_lines.fetch d
        @_raw_lines[ d ] = @_raw_lines.fetch d_
        @_raw_lines[ d_ ] = tmp

        io = @IO
        io.rewind
        io.truncate 0

        @_raw_lines.each do | line |
          io.write line
        end
        io.close

        ACHIEVED_
      end
    end

    ACHIEVED_ = true
    SPACE_ = ' '
    UNABLE_ = false
  end
end

# ~

d = Skylab::Stack.new(
  ::ARGV, nil, $stdout, $stderr, [ $PROGRAM_NAME ], ::File
).execute

if d.nonzero?
  $stderr.puts "(exitstatus: #{ d })"
end

exit d
