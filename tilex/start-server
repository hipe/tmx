#!/usr/bin/env bash

# at #birth, a fair amount of this (20-30%?) is copy-pasted from our
# "apprentice file" which is the erstwhile same-named file in [cap-server].
# The reason we aren't abstracting and re-using the same bash code from there
# is mostly to avoid a dependency nightmare since these are, after all,
# supposed to be simple, standalone startup scripts. But bear in mind we might
# eventually DRY these two if the duplication starts to feel absurd

gojs_repo_url="https://github.com/NorthwoodsSoftware/GoJS.git"
gojs_version="2.2.14"
gojs_tag_name="v${gojs_version}"

redbean_version='2.0.15'  # last upgrade #history-C.1
redbean_build_stem='unsecure'
redbean_exe_file="redbean-${redbean_build_stem}-${redbean_version}.com"
tmpdir_entry='z'
port=8080

bash_source="${BASH_SOURCE[0]}"

main() {
    do_pathnames
    >&2 echo "Listening on port $port (which is hardwired for now)."
    ensure_redbean_is_installed
    ensure_git_checkout_of_gojs
    ensure_gojs_vendor_assets
    exec_out_to_redbean
}

exec_out_to_redbean () {
    local opts="-vv"  # increase verbosity
    # opts+=" -VV" # increase SSL verbosity
    opts+=" -z"  # print port
    opts+=" -u"  # uniprocess
    # opts+=" -k"  # disable ssl fetch verify
    opts+=" -m"  # log messages
    opts+=" -b"  # log message bodies
    opts+=" -a"  # log resource usage
    opts+=" -g"  # log handler latency

    local do_this=("$redbean_exe_path" "$opts" -p "$port" -D "$doc_root")
    # (see apprentice file which has more about the above including CAUTION)

    echo "${do_this[*]}"
    eval "${do_this[*]}"
}

ensure_gojs_vendor_assets() {
    local vendor_dir="${doc_root}/vendor"
    if [ ! -d "$vendor_dir" ] ; then
        >&2 echo "mkdir $vendor_dir"
        mkdir $vendor_dir
    fi
    local version_dir="${vendor_dir}/gojs@${gojs_version}"
    if [ ! -d "$version_dir" ] ; then
        >&2 echo mkdir "$version_dir"
        mkdir "$version_dir"
    fi

    local tail
    for tail in \
            release/go-debug.js \
            extensions/TreeMapLayout.js \
            ; do

        local src="${gojs_working_copy}/${tail}"
        local dest="${version_dir}/${tail}"
        # If the destination file alread exists, skip
        if [ -e "$dest" ] ; then
            >&2 echo "exists: $dest"
        else
            # If the dest dirname not exists,
            local dn=$(dirname "$dest")
            if [ ! -d "$dn" ] ; then
                # If the parent dir not exists, fail because too deep
                local dn2=$(dirname "$dn")
                if [ ! -d "$dn2" ] ; then
                    >&2 echo "we are avoiding doing mkdir -p. but: $dn2"
                    exit 3
                fi
                >&2 echo mkdir "$dn"
                mkdir "$dn"
            fi
            >&2 echo cp "$src" "$dest"
            cp "$src" "$dest"
        fi
    done
}

ensure_git_checkout_of_gojs() {
    # Resolve semi-permanent tmpdir
    if [ ! -d "$tmpdir" ] ; then
        >&2 echo "tmpdir not found, can't procede: $tmpdir"
        exit 3
    fi

    # Resolve repository checkout
    local ec
    if [ -e "$gojs_working_copy" ] ; then
        >&2 echo "exists, won't git checkout again: $gojs_working_copy"
    else
        git clone "$gojs_repo_url"  "$gojs_working_copy"
        ec="$?"
        if [ 0 != "$ec" ] ; then
            >&2 echo "something went wrong with git. Aborting. (exit code $ec)"
            exit "$ec"
        fi
    fi

    # Change to tag
    pushd "$gojs_working_copy"
    local wat=$(git describe --tags)
    if [ "$wat" == "$gojs_tag_name" ] ; then
        >&2 echo "(as expecteded, already on tag ${gojs_tag_name})"
    else
        >&2 echo "(checking out tag for target stable version: ${gojs_tag_name})"
        git checkout tags/"$gojs_tag_name"
    fi
    popd > /dev/null
    # (otherwise it echos the new pwd)
}


ensure_redbean_is_installed() {
    if [ -f "$redbean_exe_path" ]; then
        return
    fi
    >&2 echo "redbean executable is not here: ${redbean_exe_path}"
    >&2 echo ""
    >&2 echo -n "See our 'apprentice file' for more on how to download it"

    local this="${mono_repo_dir}/cap-server/start-serve"
    if [ -f "$this" ]; then
        >&2 echo ":\n    $this"
        exit 3
    fi
    >&2 echo "\nApprentice file not found: $this"
    exit 3
}

do_pathnames() {
    # (copy-pasted at #birth from apprentice file)

    local subproj_dir=$(cd "$(dirname "$bash_source")" &> /dev/null && pwd )
    # (https://stackoverflow.com/questions/59895/how-can-i-get-the-source-directory-of-a-bash-script-from-within-the-script-itself)

    doc_root="$subproj_dir/public"

    local mono_repo_dir=$(dirname "$subproj_dir")
    tmpdir="$mono_repo_dir/$tmpdir_entry"
    gojs_working_copy="$tmpdir/GoJS"
    redbean_exe_path="$tmpdir/$redbean_exe_file"
}

main

# #history-C.1: Add install vendor lib (via git checkout)
# #birth
