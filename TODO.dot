digraph g {


/* nodes in alphabetical order (disregarding first component) */

n_articles_for[label="(articles for)"
]
n_bots_learn[label="grok
bots
"
]
n_channel_game_dev[label="start a dedicated channel
for game dev in DTF
"
shape=rect
]
n_css_academic[label="an academic
design
"
shape=rect
]
n_css_dream[label="have your first
self-made theme
"
shape=rect
]
n_css_github[label="github-style
styling either
the easy way or
the hard way
"
shape=rect
]
n_css_glitch[label="a glitch
design
"
shape=rect
]
n_css_parallax[label="CSS for
parallax
"
shape=rect
]
n_css_travers[label="a travers
design
"
shape=rect
]
n_chose_pg[label="find a dilligenced
parser generator"
style=filled
]
n_make_css[label="design one
of these
"
shape=diamond
]
n_css_learn_responsive[label="re-grok
responsive
CSS
"
]
n_css_woah[label="HSR
design
dynamism
"
shape=rect
]
n_dim_sum_ec[label="DIM SUM for the youtube
channel Extra Credits
"
shape=rect
]
n_dim_sum_heroku_plug_ins[label="DIM SUM of
heroku plug-ins
"
style=filled
shape=rect
]
n_dim_sum_themes[label="DIM SUM for
every hugo theme
"
shape=rect
]
n_filter_by[label="filter by tags"
style=filled
]
n_frontmatter_magic[label="isomorphicism
between
first header
and title
"
]
a_frontmatter_yikes[label="abstract
front-matter out
of files
"
]
objective_game_server[label="game server
difficulty: med
workload: hi
"
shape=rect
]
n_gather_css[label="of these"
]
gfm_rumskalla[label="github-flavored markdown rumskalla
difficulty: low
workload: med
acceptance: docs of sakin agac lib,
looking like github docs,
regen not painful. can runlocal
"
style=filled
shape=rect
]
n_gimp_intro[label="learn enough
GIMP, document it
(mabye DIM SUM)
"
shape=rect
]
objective_grep_dump[label="grep dump
difficulty: hi
workload: hi
"
shape=rect
]
n_heroku_competency[label="you are
re-familiarized
(competent)
with heroku."
shape=rect
style=filled
]
n_heroku_doc_2[label="you have
re-familiarized yourself with
heroku and re-documented it
for yourself as necessary."
style=filled
shape=rect
]
a_heorku_doc_2[label="Write this"
style=filled
]
n_heroku_grok[label="grok
heroku
properly
"
style=filled
]
n_heroku_monorepo_integrate[label="iterate on
getting hugo as-is
to fit into your
mono repo
architecture"
style=filled
]
n_hosting_static_files[label="(s3 for?) static files
integ with heroku
"
style=filled
]
n_hosting_videos[label="s3 for
video hosting
"
shape=rect
]
n_hugo_buildpack[
label="you have
a standalone repo that
uses the hugo buildpack
to publish a hello world
blog entry to the internet
on heroku"
style=filled
shape=rect
]
yn_hugo_buildpack[
label="if you
can get it
to work"
style=filled
shape=diamond
]
n_hugo_buildpack_read[label="Read that blog article
whatever about using the hugo
heroku buildpack to publish with
hugo on heroku
"
style=filled
]
n_hugo_document[
label="you have
documented exactly what you
did you get hugo installed
and working from zero
"
style=filled
shape=rect
]
a_hugo_document[label="Write this
"
style=filled
]
b_hugo_extras[label="look at
some of these
too
"
]
n_hugo_get_gud[label="try one
of these
"
style=filled
]
n_hugo_hello[
label="you have
a stupid simple
hello world article
published on the internet
from hugo that is
part of your
mono repo
"
style=filled
shape=rect
]
a_hugo_hello[label="Integrate minimal
hello world into
your mono-repo"
style=filled
]
n_hugo_integrate[
label="you have
figured out how
to integrate hugo
into your mono repo
to leverage existing
documents in a way
that doesn't suck"
shape=rect
style=filled
]
n_hugo_made[label="you have
generated a
static site
with hugo
(so you have
the stack locally)"
style=filled
shape=rect
]
n_hugo_published[label="you have
achieved good
enough publishing
for now to
get started."
shape=rect
style=filled
]
n_hugo_symlinks_dirs[label="consider
symlinks hack
(directories)
"
style=filled  /* we didn't technically do it.. */
]
n_hugo_symlinks_files[label="consider
symlinks hack
(files)
"
style=filled
]
n_js_dim[label="javascript frontend
for DIM SUM
"
shape=rect
]
n_logging[label="logging"
shape=rect
]
n_lozenge_have[label="lozenge
grid
"
shape=rect
]
n_nginx[label="nginx not
python
"
shape=rect
]
n_parse_taggings[label="parsed tagged strings"
style=filled
]
n_parse_queries[label="parse tag queries"
style=filled
]
n_publish_dim_sum[label="..which lets you
publish small
subdomain surveys..
"
style=filled
shape=rect
]
yn_publishing_ok[label="good enough?"
style=filled
shape=diamond
]
n_publishing_simple[label=
"isomorphic
jekyll-like
heroku-enabled
stupid simple
publishing
"
style=filled
]
n_react_enough[label="learn enough react"
]
objective_sakin_agac[label="sakin agac
difficulty: med
workload: hi
acceptance: nasim
"
shape=rect
]
n_samhara[label="samhara: a place to hold dreams
music, movies, videogames, dance..."
shape=rect
]
n_SEO[label="SEO"
shape=rect
]
n_sync[label="• the sync script
• md table datastore
"
style=filled
]
n_theme_choose[label="choose a
theme
"
]
n_theme_integrate[label="integrate,
you could do DIM SUM
of SSG features..
"
shape=rect
]
objective_upload_bot[label="upload bot
difficulty: v hi
workload: med
"
shape=rect
]
n_use_sync[label="merge two
data producers
(is DIM SUM)
"
style=filled
shape=rect
]


/* relationships in ordered by head node (then tail node) */

n_articles_for->n_samhara
n_bots_learn->objective_game_server
n_bots_learn->objective_upload_bot
n_chose_pg->n_parse_queries
n_chose_pg->n_parse_taggings
n_css_academic->n_gather_css
n_css_dream->n_gather_css
n_css_dream->n_lozenge_have
n_css_github->n_gather_css
n_css_learn_responsive->n_make_css
n_css_learn_responsive->objective_sakin_agac
n_css_glitch->n_gather_css
n_css_parallax->n_dim_sum_themes
n_css_travers->n_gather_css
n_css_woah->n_samhara
n_dim_sum_ec->n_articles_for
n_dim_sum_ec->n_channel_game_dev
n_dim_sum_heroku_plug_ins->n_articles_for
n_dim_sum_heroku_plug_ins->n_publishing_simple
n_dim_sum_themes->n_articles_for
n_dim_sum_themes->n_theme_choose
n_css_dream->n_gimp_intro
n_filter_by->n_dim_sum_heroku_plug_ins
n_frontmatter_magic->a_frontmatter_yikes
n_gather_css->n_css_woah[label="any 2"]
n_gimp_intro->n_articles_for
n_gimp_intro->n_react_enough
gfm_rumskalla->objective_sakin_agac
n_heroku_competency->n_bots_learn
n_heroku_competency->objective_grep_dump
n_heroku_competency->a_heorku_doc_2
n_heroku_doc_2->n_heroku_competency
a_heorku_doc_2->n_heroku_doc_2
n_heroku_grok->n_publishing_simple
n_heroku_monorepo_integrate->yn_publishing_ok
n_hugo_get_gud->yn_publishing_ok[label=then]
n_hugo_buildpack->n_heroku_competency
yn_hugo_buildpack->n_hugo_buildpack
n_hugo_buildpack->n_hugo_made
n_hugo_buildpack_read->yn_hugo_buildpack
a_hugo_document->n_hugo_document
n_hugo_document->n_hugo_made
b_hugo_extras->n_logging
b_hugo_extras->n_nginx
b_hugo_extras->n_SEO
n_hugo_get_gud->n_make_css
n_hugo_get_gud->n_frontmatter_magic
n_hugo_get_gud->n_hugo_symlinks_dirs
n_hugo_get_gud->n_hugo_symlinks_files
n_hugo_hello->n_hugo_buildpack
a_hugo_hello->n_hugo_hello
n_hugo_hello->n_heroku_monorepo_integrate
n_hugo_integrate->n_hugo_hello
n_hugo_integrate->n_hugo_published
n_hugo_made->a_hugo_document
n_hugo_made->a_hugo_hello
n_hugo_published->b_hugo_extras
n_hosting_static_files->gfm_rumskalla
n_hosting_static_files->objective_sakin_agac
n_hosting_videos->objective_sakin_agac
n_js_dim->n_dim_sum_ec
n_lozenge_have->n_samhara
n_make_css->n_css_academic
n_make_css->n_css_github
n_make_css->n_css_glitch
n_make_css->n_css_parallax
n_make_css->n_css_travers
n_parse_queries->n_filter_by
n_parse_taggings->n_filter_by
n_publish_dim_sum->n_css_parallax
yn_publishing_ok->n_hugo_get_gud[label=no]
yn_publishing_ok->n_hugo_integrate[label=yes]
n_publishing_simple->gfm_rumskalla
n_publishing_simple->n_heroku_competency
n_publishing_simple->n_publish_dim_sum
n_react_enough->n_js_dim
n_sync->n_use_sync
n_theme_choose->n_theme_integrate
n_theme_integrate->n_css_dream
n_theme_integrate->n_articles_for
n_use_sync->n_articles_for
n_use_sync->n_chose_pg


rankdir=BT

label="
the rectangular nodes are states.

an arrow pointing from one
state to another mean \"implies\".

elliptical nodes are actions.

an arrow from an action to a
state means \"produces\".

an arrow from a state to an
action means \"is a precursor to\".
"
}
/*
#history-B.4: splice in another graph (not yet merged)
#history-B.3: reverse the order of every arrow ONLY
#history-B.2: normalize node layout, alphabetize assocs (sort of) ONLY
#history-B.1: rename every node ONLY
#historyA.1: big spike
#born.
*/
