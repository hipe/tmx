#!/usr/bin/env bash

redbean_version='2.0.4'
redbean_build_stem='unsecure'
redbean_exe_file="redbean-${redbean_build_stem}-${redbean_version}.com"
# (since #history-C.1 there's no more *.dbg version)

recutils_exe_name='recsel'

tmpdir_entry='z'
# (NOTE in development we use the above (under the mono-repo root dir)
# to be a "semi-permanent tempdir"; basically to hold files that are
# necessary for the runtime but not versioned. We don't expect this
# arrangement to stay this way into "production" (or remove this comment))


argv=("${@}")
bash_source="${BASH_SOURCE[0]}"

main() {
    ensure_correct_getopt_version_is_installed
    parse_argv
    do_pathnames
    ensure_recutils_is_installed
    ensure_redbean_is_installed
    ensure_CSS_theme_is_installed
    exec_out_to_redbean
}

port='8080'

parse_argv() {
    local s
    s=`getopt -o hp: -l help,port: -- "${argv[@]}"`
    local es="$?"
    if [ "$es" -ne 0 ]; then
        exit "$es"
    fi
    eval set -- "$s"

    while true ; do
        case "$1" in
            -h|--help)
                shift 2
                show_help
                exit 0 ;;
            -p|--port)
                port="$2"
                shift 3 ; break ;;
            --) shift ; break ;;
            *) >&2 echo "oops, write me: $1" ; exit 1 ;;
        esac
    done
}

show_help() {
    local use_prog_name=$(dirname "$bash_source")
    >&2 echo "usage: $use_prog_name [-p PORT]"
    >&2 echo ""
    >&2 echo "description: Start the \"capabilities server\" (using redbean)."
    >&2 echo ""
    >&2 echo "options:"
    >&2 echo "  -p|--port         passed through to redbean"
    >&2 echo ""
    >&2 echo "(here is a table describing different available redbean builds"
    >&2 echo " with the purpose of justifying why we chose the build we chose.)"
    >&2 echo ""
    >&2 echo "| ssl? | sqlite? | lua? |   other  | ~size | build name stem"
    >&2 echo "|    ? |       ? |    ? |          |     2 |\"demo\""
    >&2 echo "|      |         |      | mem safe |     5 |\"asan\""
    >&2 echo "|   no |      no |   no |          |     0 |\"original\""
    >&2 echo "|  yes |      no |   no |          |     1 |\"static\""
    >&2 echo "|   no |     yes |  yes |          |     1 |\"unsecure\""
    >&2 echo "|   no |      no |   no | no zlib  |     0 |\"original-tinylinux\""
    >&2 echo ""
    >&2 echo "(Each build has a \".dbg\" variant (totalling 12).)"
    >&2 echo ""
    >&2 echo "(The simplest build that has our reqs (S+L) is \"unsecure\".)"
}


exec_out_to_redbean() {
    local opts="-vv"  # increase verbosity
    # opts+=" -VV" # increase SSL verbosity  # #history-C.1
    opts+=" -z"  # print port
    opts+=" -u"  # uniprocess
    # opts+=" -k"  # disable ssl fetch verify  # #history-C.1
    opts+=" -m"  # log messages
    opts+=" -b"  # log message bodies
    opts+=" -a"  # log resource usage
    opts+=" -g"  # log handler latency

    local do_this=("$redbean_exe_path" "$opts" -p "$port" -D "$doc_root")
    echo "${do_this[*]}"
    eval "${do_this[*]}"
    # (we used to exec before #history-C.1 but it is no longer nec. w/ --assimilate)
}


ensure_CSS_theme_is_installed() {
  local target_dir="${doc_root}/vendor-themes/orderedlist-minimal-cb00000"
  if [ -d "$target_dir" ] ; then
    return
  fi
  local parent_dir=$(dirname "${target_dir}")
  if [ ! -d "$parent_dir" ] ; then
    mkdir "$parent_dir"
  fi
  local zipfile_path="${parent_dir}/tmp.zip"
  wget https://github.com/orderedlist/minimal/zipball/master -O "$zipfile_path"
  pushd "$parent_dir"
  unzip tmp.zip
  rm tmp.zip
  popd
  if [ -d "$target_dir" ] ; then
    return
  fi
  >&2 echo "something's not right. should exist: ${target_dir}"
  exit 3
}


ensure_redbean_is_installed() {
    if [ -f "$redbean_exe_path" ]; then
        return
    fi
    >&2 echo "redbean executable is not here: ${redbean_exe_path}"
    >&2 echo ""
    >&2 echo "(we could script this but it's out of scope for now:)"
    >&2 echo "Try this to install the requisite build of redbean:"
    >&2 echo ""
    >&2 echo "    curl https://redbean.dev/${redbean_exe_file} -o ${redbean_exe_path}"
    >&2 echo "    chmod ug+x ${redbean_exe_path}"
    >&2 echo "    bash -c \"${redbean_exe_path} --assimilate\""
    >&2 echo ""
    >&2 echo "(And then run this script again.)"
    exit 3
}

ensure_recutils_is_installed() {
    command -v "$recutils_exe_name" 1>/dev/null
    # we don't have a manpage or --help for the above. we got it from:
    # https://unix.stackexchange.com/questions/85249/why-not-use-which-what-to-use-then
    yes="$?"
    if [ 0 -eq "$yes" ]; then
       return
    fi
    >&2 echo "Cannot continue because '${recutils_exe_name}' is not installed."
    >&2 echo "We installed it on ubuntu with this:"
    >&2 echo "    sudo apt-get install recutils"
    >&2 echo "We installed it on OS X in the past with 'brew' \(probably\)."
    exit 3
}

do_pathnames() {
    # https://stackoverflow.com/questions/59895/how-can-i-get-the-source-directory-of-a-bash-script-from-within-the-script-itself

    local cap_server_dir=$(cd "$(dirname "$bash_source")" &> /dev/null && pwd )
    local mono_repo_dir=$(dirname $(dirname "$cap_server_dir"))
    redbean_exe_path="$mono_repo_dir/$tmpdir_entry/$redbean_exe_file"
    doc_root="$cap_server_dir/doc-root"
}

ensure_correct_getopt_version_is_installed() {
    getopt -T
    local es="$?"
    if [ 4 -eq "$es" ]; then
        return
    fi
    >&2 echo 'need a more recent version of getopt, it failed the -T test'
    exit 3
}

main

# #history-C.1
# #born
