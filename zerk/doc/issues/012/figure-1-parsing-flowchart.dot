digraph g {

edge [colorscheme=paired10]

label="\nfigure 1. logical flowchart for
how we parse API invocations
(see figure 3 for instance analysis)
"

/* questions & associations */

/* just go */

state_extra_args_post_op->state_failed
state_component_parse->ask_component_parse_succeed
state_component->ama3
state_compound_yes->state_more_arguments
state_inquiry->state_succeeded
state_more_arguments->ask_assoc
state_operation->ask_arg_parse_succeeded
state_start->ama1
state_unrecognized->state_failed
state_whether_compound->state_inquiry
state_write->ama1

/* no & yes (next letter: (t)) */

ask_arg_parse_succeeded->state_failed [label="no (f)"]
ask_arg_parse_succeeded->ama2 [label="yes (g)"]
ask_assoc->ask_operation [label="no (c)"]
ask_assoc->state_component [label="yes (k)"]
ask_component_parse_succeed->state_failed [label="no (r)"]
ask_component_parse_succeed->state_write [label="yes (s)"]
ask_compound->state_component_parse [label="no (p)"]
ask_compound->state_compound_yes [label="yes (q)"]
ama1->state_more_arguments [label="yes (b)"]
ama1->state_inquiry [label="no (a)"]
ama2->state_succeeded [label="no (j)"]
ama2->state_extra_args_post_op [label="yes (h)"]
ama3->state_whether_compound[label="no (m)"]
ama3->ask_compound [label="yes (n)"]
ask_operation->state_unrecognized [label="no (d)"]
ask_operation->state_operation [label="yes (e)"]

/* asks */

ask_arg_parse_succeeded [shape=diamond label="succeeded? (1st)"]
ask_assoc [shape=diamond label="association?"]
ask_component_parse_succeed [shape=diamond label="succeeded? (2nd)"]
ask_compound [shape=diamond label="is aforementioned\nassoc. compound?"]
ama1 [shape=diamond label="are there more\narguments? (1st)"]
ama2 [shape=diamond label="are there more\narguments? (2nd)"]
ama3 [shape=diamond label="are there more\narguments? (3rd)"]
ask_operation [shape=diamond label="operation?"]

/* states */

state_start [shape=rectangle label="START: all API invocations start
with a \"root\" compound node
in the first frame of
the \"selection stack\""]

state_component [shape=rectangle label="accept the token.."]

state_component_parse [shape=rectangle label="whether primitivesque or
entitesque, pass parse control
to the to the model to let it
attempt to \"interpret\" 
\"autonomously\" a new
component value from the
argument stream."]

state_compound_yes [shape=rectangle label="\"touch\" (somehow) the
compound component value.
push a new frame on the
selection stack.         "]

state_extra_args_post_op [shape=rectange label="unlike elsewhere, here
operations (if present) must
occur \"at the end\" (so that
their result can serve as our
result unambiguously)."]

state_inquiry [shape=rectangle label=".. treat this as a component
value inquiry into the
aforementioned component."]

state_more_arguments [shape=rectangle label="so you have a \"current token\"
(not yet accepted). in the current
compound, is this token.."]

state_operation [shape=rectange label="accept the token. the
operation \"autonomously\"
attempts to \"prepare\" itself
by parsing all the arguments it
can off the argument stream."]

state_unrecognized [shape=rectangle label="the token is
unrecognizable"]

state_whether_compound [shape=rectange label="whether compound
or not.."]

state_write [shape=rectangle label="write the component
value into the current
compound.                "]

/* -- */

state_failed [shape=rectangle label="result is false-ish
(occurs IFF failed)"]

state_succeeded [shape=rectangle label="[result is per
figure 2]"]

}
