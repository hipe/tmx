#!/usr/bin/env ruby -w

# class Skylab::Git
#   model Models_::Whatever
#     class Unrename < Action_
#       class Some_Actor


cls = class Skylab_Git_Models_Whatever_Unrename

        def initialize i, o, e, pn_s_a, a

          @argv = a
          @do_forward = true
          @pairs = []
          @pn_s_a = pn_s_a
          @serr = e
          @sin = i
          @sout = o
        end

        def execute

          @_did_show_help = false

          ok = __parse_argv
          ok &&= __resolve_filechange_stream
          ok &&= __via_filechange_stream
          if ok
            ok
          elsif @_did_show_help
            0
          else
            ok
          end
        end

        # ~ phase 1 - parsing ARGV

        def __parse_argv

          _ok = __parse_opts
          _ok && __parse_args
        end

        def __parse_opts

          require 'optparse'

          op = ::OptionParser.new

          op.on '-R', '--reverse',
              'reproduce the original `mv` statements' do

            @do_forward = false
          end

          x = ACHIEVED_
          op.on '--help', 'this screen' do

            io = @serr

            io.puts "synopsis: output the text for the git commands that\n#{
              }          unrename (or rename) files per the renames in the commit\n\n"

            io.puts "usage: #{ _program_name } [ -R ] [ <commit> ]"

            io.puts

            io.puts 'options:'

            op.summarize io

            io.puts

            io.puts 'argument:'

            _ = SPACE_ * 25

            io.puts "    <commit>#{ _ }if not provided, treats <stdin> as the"

            io.puts "            #{ _ }output of `git log -1 --summary -M` for e.g"

            io.puts

            io.puts "example:"
            io.puts "    #{ _program_name } HEAD#{ SPACE_ * 12 }#{
              }# produces unrenames for renames in HEAD commit"

            @_did_show_help = true
            x = CEASE_
          end

          begin
            op.parse! @argv
          rescue ::OptionParser::ParseError => e
            @serr.puts e.message
            _invite
            x = UNABLE_
          end

          x
        end

        def __parse_args

          is_interactive = @sin.tty?

          case 1 <=> @argv.length
          when 0
            if is_interactive
              __when_argv
            else
              __when_both
            end

          when -1
            if is_interactive
              __when_extra_argv
            else
              __when_both
            end

          when  1
            if is_interactive
              __when_neither
            else
              __when_stdin
            end
          end
        end

        def __when_both

          @serr.puts "can't take input from both STDIN and commit (#{
            }#{ @argv[ 0 ].inspect })"
          _invite
          UNABLE_
        end

        def __when_neither

          @serr.puts "expecting <commit> or STDIN"
          _invite
          UNABLE_
        end

        def __when_extra_argv

          @serr.puts "unpexpected argument: #{ @argv[ 1 ].inspect }"
          __invite
          UNABLE_
        end

        def __when_argv

          @_resolve_filechange_stream_by = :__resolve_FC_stream_via_commit
          @commit_reference_s = @argv.fetch 0
          ACHIEVED_
        end

        def __when_stdin

          @_resolve_filechange_stream_by = :__resolve_FC_stream_via_line_stream
          ACHIEVED_
        end

        def _invite
          @serr.puts "see '#{ _program_name } --help'"
          nil
        end

        def _program_name
          @___pn ||= __build_program_name
        end

        def __build_program_name
          [ ::File.basename( @pn_s_a.first ), * @pn_s_a[ 1 .. -1 ] ] * SPACE_
        end

        # ~ phase 2 branch 1: via commit

        def __resolve_filechange_stream

          require_relative '../lib/skylab'
          require 'skylab/git-viz/core'

          @_lib = ::Skylab::GitViz
          self._NEEDS_TRIVIAL_CLEANUP
          @repo = @_lib.repository.new_via_path( ::Dir.pwd )

          send @_resolve_filechange_stream_by
        end

        def __resolve_FC_stream_via_commit

          ok = __resolve_commit
          ok && __via_commit_resolve_filechange_stream
        end

        def __resolve_commit

          @ci = @repo.fetch_commit_via_identifier(
            @commit_reference_s

          ) do | * i_a, & ev_p |

            # check out this total hack of [br]'s event expression logic:

            _s_a = i_a.map do | sym |
              sym.id2name.gsub UNDERSCORE_, SPACE_
            end

            @serr.puts "#{ _s_a * ', ' }: #{ ev_p[].to_exception.message }"
            _invite

            UNABLE_
          end
          @ci && ACHIEVED_
        end

        def __via_commit_resolve_filechange_stream

          fcs = @ci.to_filechange_stream
          if fcs
            @_filechange_stream = fcs
            ACHIEVED_
          else
            fcs
          end
        end

        # ~ phase 2 branch 2: via stdin

        def __resolve_FC_stream_via_line_stream

          _FC = @_lib::VCS_Adapters_::Git::Models_::Filechange

          @_filechange_stream = ::Skylab::Callback.stream do

            begin
              line = @sin.gets
              line or break

              x = _FC.any_via_possible_rename_line line
              if x
                break
              end
              redo
            end while nil
            x
          end
          ACHIEVED_
        end

        def __via_filechange_stream

          exe = @repo.vendor_program_name

          p = if @do_forward
            -> fc do
              @sout.puts "#{ exe } mv #{ fc.destination_path } #{ fc.source_path }"
            end
          else
            -> fc do
              @sout.puts "#{ exe } mv #{ fc.source_path } #{ fc.destination_path }"
            end
          end

          st = @_filechange_stream.reduce_by do | fc |
            fc.is_rename
          end

          fc = st.gets
          if fc
            begin
              p[ fc ]
              fc = st.gets
              fc or break
              redo
            end while nil
            @serr.puts 'done.'
            ACHIEVED_
          else
            @serr.puts "no renames in #{ @commit_reference_s.inspect }?"
            UNABLE_
          end
        end

        ACHIEVED_ = true
        CEASE_ = nil
        SPACE_ = ' '
        UNABLE_ = false
        UNDERSCORE_ = '_'

  self
end

program = -> i, o, e, pn_s_a, argv do
  cls.new( i, o, e, pn_s_a, argv ).execute
end

if __FILE__ == $PROGRAM_NAME
  program[ $stdin, $stdout, $stderr, [ $PROGRAM_NAME ], ARGV ]
else
  Skylab::Git_unrename = program
end
