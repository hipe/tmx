#!/usr/bin/env ruby -w

# minimal one-off hack that takes as input the lines from an undocumented
# manual process (the output of several rspec test runs) and simply adds up
# the number of passing test and the number of seconds.
#
# the output that is generated forms the basis for the informational summaries
# found in many of our commit messages.

execute = nil

program = -> in_io, out_io, err_io, pn_s_a, argv do

  if argv.length.zero?

    execute[ in_io, out_io ]

  else

    progname = -> do
      [ ::File.basename( pn_s_a.first ), * pn_s_a[ 1 .. -1 ] ] * ' '
    end

    if /\A--?h(?:elp)?\z/ =~ argv.fetch( 0 )

      err_io.puts "usage: #{ progname[] }"
      err_io.puts
      err_io.puts "synopsis: reads an ad-hoc undocumented format from STDIN"
      err_io.puts "          at ouputs summary info used in our commit mesages"

      nil
    else

      err_io.puts "unexpected argument: #{ argv[ 0 ].inspect }"
      err_io.puts "try '#{ progname[] } -h' for help"
      nil
    end
  end
end

execute = -> in_io, out_io do

_RX1 = /\AFinished in (\d+(?:\.\d+)?) seconds?\z/
_RX2 = /\A(?<e>\d+) examples?, (?<f>\d+) failures?(?:, \d+ pending)?\z/

num_examples = 0 ; seconds = 0.0 ; num_chunks = 0


while (( line = in_io.gets ))
  line.strip!
  line.empty? and next
  num_chunks += 1
  md = _RX1.match line
  md or fail "does not match first line pattern: -->#{ line }<--"
  line = in_io.gets
  line or fail "no."
  line.strip!
  md_ = _RX2.match line
  md_ or fail "does not match second line pattern: -->#{ line }<--"
  e = md_[:e].to_i ; f = md_[:f].to_i
  f.zero? or fail "won't tally with nonzero number of failures"
  seconds += md[1].to_f
  num_examples += e
end


out_io.puts "(#{ '.' * num_chunks } #{ num_examples })"
out_io.puts "(#{ num_chunks } in #{ seconds })"

0

end

if __FILE__ == $PROGRAM_NAME

  program[ $stdin, $stdout, $stderr, [ $PROGRAM_NAME ], ARGV ]

else
  Skylab::Test_summarize = program
end
