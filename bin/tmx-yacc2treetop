#!/usr/bin/env ruby -w

module Skylab
  # (might already exist, might not)
end

module Skylab::Yacc2Treetop

  VERSION = '0.0.0'

  class << self

    def describe_into_under y, _expag
      y << "attempt to convert a `yacc` grammar into a treetop grammar"
    end

    def translate * x_a, & x_p

      o = Translation_Arguments___.new
      x_a.each_slice 2 do | sym, x |
        o[ sym ] = x
      end

      tr = Translation__.new( & x_p )

      tr.upstream = ::File.open o.yacc_file, ::File::RDONLY
      tr.downstream = o.downstream_IO
      tr.wrap_in_grammar = o.wrap_in_grammar
      tr.execute
    end
  end  # >>

  Translation_Arguments___ = ::Struct.new(
    :downstream_IO,
    :wrap_in_grammar,
    :yacc_file,
  )

  class Minimal_CLI___

    def initialize i, o, e, pn_s_a

      @_did_receive_result = false
      @_errstream = e
      @_instream = i
      @outstream_ = o
      @_pn_s_a = pn_s_a
    end

    def invoke argv

      @_argument_list = []
      @_exitstatus = nil
      @_queue = []

      @_op = __build_option_parser

      begin
        @_op.parse! argv
      rescue ::OptionParser::ParseError => e
      end

      if e
        _error e.message

      elsif :help == @_queue.first

        # the CLI is more usable if the user can supply the '-h' anywhere in
        # the input buffer and have no further normalization done. clearing
        # the queue #here reinforces this idea and makes the above check easy.

        __express_help_screen

      else
        a = @_queue
        es = __parse_argv argv
        if es.zero?

          rm = @reactive_model_

          @_argument_list.each_slice 2 do | k, v |
            rm.send :"#{ k }=", v
          end

          oes_p = -> * i_a, & ev_p do
            __receive i_a, & ev_p
          end

          a.length.times do | d |
            es = rm.send :"do__#{ a.fetch d }__", & oes_p
            if es.nonzero?
              break
            end
          end

          if es.zero? && @_do_main
            es = @reactive_model_.main( * argv, & oes_p )
          end
        end

        if @_did_receive_result  # really only to prove to specs that we can..
          @_result
        else
          es  # .. generally an integer result is cleaner.
        end
      end
    end

  private

    def __build_option_parser
      o = Build_option_parser___.new
      o.argument_list = @_argument_list
      o.reactive_model = @reactive_model_
      o.queue = @_queue
      o.execute
    end

    # ~

    def __parse_argv argv

      @_do_main = false
      @_method = @reactive_model_.method :main

      d = argv.length

      if d.zero? && @_queue.length.nonzero?
        SUCCESS_EXITSTATUS_
      else
        max = @_method.arity.abs
        if max < d
          _error __say_extra argv.fetch max
        else
          count = 0
          missing_this = nil
          @_method.parameters.each do | typ, sym |
            :req == typ or next
            count += 1
            if count > d
              missing_this = sym
              break
            end
          end
          if missing_this
            _error __say_missing missing_this
          else
            @_do_main = true
            SUCCESS_EXITSTATUS_
          end
        end
      end
    end

    def __say_extra x
      "unexpected argument #{ x.inspect }"
    end

    def __say_missing sym
      "expecting #{ __render__req__ sym }"
    end

    # ~

    def __express_help_screen

      _express_info_line _usage_line
      @_errstream.puts

      @_errstream.write "#{ em 'description:' } "

      Home_.describe_into_under _info_yielder, self
      @_errstream.puts

      _express_info_line "#{ em 'options:' }"
      @_op.summarize @_errstream

      SUCCESS_EXITSTATUS_
    end

    # ~

    def __receive i_a, & ev_p

      if 1 == i_a.length
        send :"receive__#{ i_a.first }__", ev_p[]
        NIL_
      else
        send :"__receive__#{ i_a.fetch 1 }__", i_a, & ev_p
      end
    end

    def receive__result__ x
      @_did_receive_result = true
      @_result = x
      NIL_
    end

    def __receive__resource__ i_a
      send :"__#{ i_a.fetch 0 }__resource"
    end

    def __stdin__resource
      @_instream
    end

    def __stdout__resource
      @outstream_
    end

    def __receive__expression__ i_a, & ev_p

      send :"__receive__#{ i_a.fetch 0 }__expression", i_a, & ev_p
    end

    def __receive__error__expression _, & x_p

      __receive__info__expression _, & x_p
      _express_info_line _invite_line
      GENERIC_ERROR_EXITSTATUS_
    end

    def __receive__info__expression _
      yield _info_yielder
      NIL_
    end

    def __receive__payload__expression _

      yield( @___payload_yielder ||= __build_payload_yielder )
      NIL_
    end

    def _info_yielder
      @___info_yielder ||= __build_info_yielder
    end

    def __build_info_yielder

      _build_yielder_around @_errstream
    end

    def __build_payload_yielder

      _build_yielder_around @outstream_
    end

    def _build_yielder_around io

      ::Enumerator::Yielder.new do | s |
        io.puts s
      end
    end

    # ~

    def _error msg
      _express_info_line msg
      _express_info_line _usage_line
      _express_info_line _invite_line
      GENERIC_ERROR_EXITSTATUS_
    end

    def _usage_line
      "#{ em 'usage:' } #{ usage_syntax_string_ }"
    end

    def _invite_line
      "#{ em "#{ program_name_ } -h" } for help"
    end

    def argument_syntax_
      @_method ||= @reactive_model_.method :main
      s_a = []
      @_method.parameters.each do | typ, sym |
        s = send :"__render__#{ typ }__", sym
        s and s_a.push s
      end
      s_a * SPACE_
    end

    def __render__opt__ sym
      "[#{ __render__req__ sym }]"
    end

    def __render__rest__ sym
      "[#{ __render__req__ sym } [..]]"
    end

    def __render__req__ sym
      "<#{ sym.id2name.gsub UNDERSCORE_, DASH_ }>"
    end

    def __render__block__ _
      NIL_
    end

    def program_name_
      @__pn ||= __build_program_name
    end

    def __build_program_name
      # (we don't do the basename of first, we want the full executable path)
      @_pn_s_a * SPACE_
    end

    def _express_info_line msg
      @_errstream.puts msg
    end

    Codes = {:bold=>1,:red=>31,:green=>32,:yellow=>33,:blue=>34,
      :purple=>35,:cyan=>36,:white=>37}

    def color(s, *a); "\e[#{a.map{|x|Codes[x]}.compact*';'}m#{s}\e[0m" end

    def em(s); style(s, :em) end

    Styles = { :error => [:bold, :red], :em => [:bold, :green] }

    def style(s, style); color(s, *Styles[style]) end

  end

  class Build_option_parser___

    attr_writer( :argument_list, :reactive_model, :queue )

    def execute

      ::Kernel.require 'optparse'
      @_op = ::OptionParser.new

      __build_actions_into_op

      __build_options_into_op

      @_op.on '--help', 'Shows this screen' do
        @queue.clear.push :help  # explained :#here
      end

      @_op
    end

    def __build_actions_into_op

      op = @_op
      rm = @reactive_model

      rm.class::AUXILIARY_ACTIONS.each do | sym |

        m = :"__#{ sym }__is_visible"
        _is_visible = if rm.respond_to? m
          rm.send m
        else
          true
        end

        s = _slug_via_symbol sym

        if _is_visible

          op.on "--#{ s }", rm.send( :"__#{ sym }__description_line" ) do
            @queue.push sym
          end
        else
          op.base.long[ s ] = ::OptionParser::Switch::NoArgument.new do
            @queue.push sym
          end
        end
      end
    end

    def __build_options_into_op

      x_a = @reactive_model.class::PROPERTIES
      last = x_a.length - 1
      d = -1

      s_a = []
      y = ::Enumerator::Yielder.new do | s |
        s_a.push s
      end

      begin
        if last == d
          break
        end
        d += 1
        do_again = true
        is_flag = false
        desc_p = nil
        begin
          sym = x_a.fetch d
          case sym
          when :description
            d += 1
            desc_p = x_a.fetch d
          when :flag
            is_flag = true
          when :property
            do_again = false
          else
            raise ::ArgumentError, "no: '#{ sym }'"
          end

          if do_again
            d += 1
            redo
          end

          if desc_p
            desc_p[ y ]
          end

          d += 1

          -> sym_ do

            slug = _slug_via_symbol sym_

            if is_flag
              self._K
            else
              @_op.on "--#{ slug }=X", * s_a do | x |
                @argument_list.push sym_, x
              end
            end
          end.call x_a.fetch d

          s_a.clear

          break
        end while nil
        redo
      end while nil
    end

    def _slug_via_symbol sym
      sym.id2name.gsub UNDERSCORE_, DASH_
    end
  end

  # ~

  class CLI < Minimal_CLI___

    def initialize( * )
      @reactive_model_ = Reactive_Model___.new
      super
    end

    def usage_syntax_string_
      "#{ program_name_ } [opts] { #{ argument_syntax_ } | \"-\" }"
    end

    def receive__fixture__ fx

      a = [ program_name_ ]
      s = fx.opts
      s and a.push s
      a.push fx.path

      @outstream_.puts a.join SPACE_
      NIL_
    end
  end

  # ~

  class Reactive_Model___

    def initialize
      @grammar = nil
    end

    AUXILIARY_ACTIONS = [
      :ping,
      :version,
      :tt_grammar,
      :tests,
    ]

    def __ping__is_visible
      false
    end

    def do__ping__ & oes_p

      oes_p.call :info, :expression, :ping do | y |
        y << "hello from yacc2treetop."
      end

      oes_p.call :result do
        :hello_from_yacc2treetop
      end

      SUCCESS_EXITSTATUS_
    end

    def __version__description_line
      'Display version information'
    end

    def do__version__ & oes_p

      oes_p.call :payload, :expression, :version do | y |
        y << VERSION
      end

      SUCCESS_EXITSTATUS_
    end

    def __tt_grammar__description_line
      'Output the yacc treetop grammar (grammar) to stdout (devel)'
    end

    def do__tt_grammar__ & oes_p

      oes_p.call :payload, :expression, :treetop_grammar do | y |
        y << GRAMMAR_TEXT__
      end
      SUCCESS_EXITSTATUS_
    end

    def __tests__description_line
      'List examples that are expected to work.'
    end

    def do__tests__ & oes_p

      oes_p.call :info, :expression, :line do | y |
        y << "Some examples to try:"
      end

      FIXTURES___.each do | f |
        oes_p.call :fixture do
          f
        end
      end

      SUCCESS_EXITSTATUS_
    end

    PROPERTIES = [

      :description, -> y do
        y << "Wrap output in grammar declaration (e.g. \"Mod1::Mod2::Grammar\")"
      end,
      :property, :grammar,
    ]

    attr_writer(
      :grammar,
    )

    def main yacc_file, & oes_p

      up_io = __produce_upstream_IO yacc_file, & oes_p

      if up_io

        down_io = oes_p.call :stdout, :resource  # for now

        o = Translation__.new( & oes_p )
        o.downstream = down_io
        o.upstream = up_io
        o.wrap_in_grammar = @grammar
        o.execute
      else
        GENERIC_ERROR_EXITSTATUS_
      end
    end

    def __produce_upstream_IO yacc_file, & oes_p

      if DASH_ == yacc_file

        io = oes_p.call :stdin, :resource
        if io.tty?
          oes_p.call :error, :expression do | y |
            y << "avoiding use of #{ DASH_.inspect } on interactive terminal."
          end
          UNABLE_
        else
          io
        end
      else
        begin
          ::File.open yacc_file, ::File::RDONLY
        rescue ::Errno::ENOENT => e
          md = /\A(.+) @ [a-z_]+ - (.+)\z/.match e.message

          oes_p.call :error, :expression, :line do | y |
            y << md.captures.join( ': ' )
          end
          UNABLE_
        end
      end
    end
  end

  # ~

  FIXTURES___ = ::Enumerator.new do | y |

    _path = ::File.expand_path(
      '../../lib/skylab/css-convert/css-/parser/selectors.yaccw3c',
      __FILE__ )

    y << Fixture__.new( _path, '-g "Ho::Ha::Lol"' )

    fixtures_dir = ::File.expand_path(
      '../../lib/skylab/yacc2treetop/test/fixtures', __FILE__ )

    _DOT = '.'
    ::Dir.new( fixtures_dir ).each do | path |
      _DOT == path[ 0 ] and next
      y << Fixture__.new( ::File.join fixtures_dir, path )
    end
    NIL_
  end

  Fixture__ = ::Struct.new :path, :opts

  # ~

  class Translation__

    attr_writer(
      :downstream,
      :upstream,
      :wrap_in_grammar,
    )

    def initialize & oes_p
      @_in_the_future = nil
      @on_event_selectively = oes_p
    end

    def execute

      __init_parser
      ok = __resolve_response_via_parser
      ok &&= __resolve_sexp_via_response
      ok &&= __via_sexp
      if ok
        SUCCESS_EXITSTATUS_
      else
        GENERIC_ERROR_EXITSTATUS_
      end
    end

    def __init_parser

      # :[#.A]: the only way we establish the *class* for this "my parser" is
      # by running the treetop code at the end of this file thru treetop, and
      # then subclassing and extending that generated parser class. the only
      # way that is ever done is thru a call to this subject method (and its
      # dedicated downstream constituents methods). if this utility serves as
      # a multi-invocation mode (e.g when running the whole test suit, or as
      # a daemon-like service), the building of this class (which is set to a
      # const) *must* only occur once.

      if Home_.const_defined? :My_Parser____, false
        cls = Home_.const_get :My_Parser____
      else
        cls = __make_my_parser_class
        Home_.const_set :My_Parser____, cls
      end
      @_parser = cls.new
      NIL_
    end

    def __make_my_parser_class  # "guaranteed"

      _cls = __make_generated_parser_class  # raises on failure
      __make_my_parser_class_via_generated_parser_class _cls
    end

    def __make_generated_parser_class  # must raise on failure

      require 'treetop'

      cls = ::Treetop.load_from_string GRAMMAR_TEXT__

      if 'Skylab::Yacc2Treetop::Grammars::Yacc3wSpecParser' != cls.name
        self._SANITY
      end

      cls
    end

    def __make_my_parser_class_via_generated_parser_class cls  # guaranteed

      cls_ = ::Class.new cls
      cls_.include Treetop_Parser_Methods___
      cls_.send :alias_method, :failure_reason, :my_failure_reason
      cls_
    end

    def __resolve_parser_via_my_parser_class
      @_parser = remove_instance_variable( :@_my_parser_class ).new
      ACHIEVED_
    end

    def __resolve_response_via_parser

      _whole_file = @upstream.read
      remove_instance_variable( :@upstream ).close

      Require_treetop_dependant_classes___[]

      x = @_parser.parse _whole_file
      if x
        remove_instance_variable :@_parser
        @_response = x
        ACHIEVED_
      else
        __when_parse_failure
      end
    end

    def __when_parse_failure

      msg = @_parser.failure_reason || __say_no_reason
      @on_event_selectively.call :error, :expression, :line do | y |
        y << msg
      end
      UNABLE_
    end

    def __say_no_reason
      "Got nil from parse without reason!"
    end

    def __resolve_sexp_via_response

      sexp = @_response.sexp
      if sexp
        @_sexp = sexp
        remove_instance_variable :@_response
        ACHIEVED_
      else
        sexp
      end
    end

    def __via_sexp

      o = TreetopBuilder___.new

      o.express_output_progressively_into @downstream

      # (the above used to be an option long ago. currently, if we do
      # not use this option, rendering is delicately borked. #open)

      @builder = o

      sexp = remove_instance_variable :@_sexp
      _x = sexp.translate self

      # (there is `builder.ruby`)

      _x
    end

    # ~ a

    def do_autogenerated_comment
      true
    end

    def build_autogenerated_text

      _data = Template_Datapoints___.new 'yacc2treetop'  # it's gotta work thru API

      Minimal_Template___.call(
        _data,
        "# Autogenerated from <%= program_name %>. Edits may be lost.\n" )
    end

    Template_Datapoints___ = ::Struct.new :program_name

    # ~ g, i

    def do_wrap_in_grammar
      @wrap_in_grammar
    end

    def set_in_the_future_proc & p
      @_in_the_future = p ; nil
    end

    def remove_any_in_the_future_proc
      x = @_in_the_future ; @_in_the_future = nil ; x
    end

    # ~ p, s

    attr_accessor :prev_node_name

    def screen_width
      NIL_
    end

    # ~ y

    def yacc_name_to_rule_name s
      s # for now
    end

    attr_reader(
      :builder,
      :downstream,
      :on_event_selectively,
      :wrap_in_grammar,
    )
  end

  module Treetop_Parser_Methods___  # (all legacy)

    def my_failure_reason
      return nil unless (tf = terminal_failures) && tf.size > 0
      "Expected " +
        ( tf.size == 1 ?
          tf[0].expected_string.inspect :
          "one of #{tf.map{|f| f.expected_string.inspect}.uniq*', '}"
        ) + " at line #{failure_line}, column #{failure_column} " +
        "(byte #{failure_index+1}) #{my_input_excerpt}"
    end

    def num_context_lines; 4 end

    def my_input_excerpt
      0 == failure_index and return "at:\n1: #{input.match(/.*/)[0]}"
      all = input[index...failure_index].split( NEWLINE_, -1)
      lines = all.slice(-1 * [all.size, num_context_lines].min, all.size)
      nos = failure_line.downto(
        [1, failure_line - num_context_lines + 1].max).to_a.reverse
      w = nos.last.to_s.size # width of greatest line number as string
      "after:\n" <<
        (nos.zip(lines).map{|no, s| ("%#{w}i" % no) + ": #{s}" } * "\n")
    end
  end

  # ~ LEGACY

  class SexpSelectorCompiler
    class << self
      def instance; @instance ||= new end
    end
    def initialize
      @selector_cache = Hash.new do |h,k|
        h[k] = nodes_selector_compile(k, true)
        h[k].freeze
      end
    end
    def compiled str
      @selector_cache[str]
    end
    def nodes_selector_compile str, freeze = false
      str.split(',', -1).map do |part|
        toks = node_selector_compile(part)
        freeze and toks.freeze
        toks
      end
    end
    def node_selector_compile str
      res = []
      s = Build_string_scanner__[ str ]
      begin
        if s.scan(/\*/); res.push '*'
        elsif s.scan(/\[/)
          d = s.scan(/\d+/) or fail("expecting digit had #{s.rest.inspect}")
          s.scan(/\]/) or fail("expecting ']' had #{s.rest.inspect}")
          res.push d.to_i
        else; fail("expecting '*' or '[' near #{s.rest.inspect}")
        end
      end until s.eos?
      res
    end
  end
  module ElementsSelector
    def elements_at str
      elements_at_recursive self, SexpSelectorCompiler.instance.compiled(str)
    end
    def elements_at_recursive node, parsed
      elements.nil? and return Array.new(parsed.size)
      parsed.map do |part|
        elements_at_part_recursive(node, part)
      end
    end
    def elements_at_part_recursive node, parsed
      mix = parsed.first == '*' ? node.elements : node.elements[parsed.first]
      mix.nil? and return nil
      parsed.size == 1 and return mix
      child_path = parsed[1..-1]
      if parsed.first == '*'
        mix.map do |ch|
          ch.elements.nil? ? nil : elements_at_part_recursive(ch, child_path)
        end
      else
        mix.elements.nil? ? nil : elements_at_part_recursive(mix, child_path)
      end
    end
  end
  class Sexpesque < Array
    alias_method :node_name, :first
    class << self
      def build name, *childs
        new([name, *childs])
      end
    end
    # begin sexp scanner methods
    def each_before name, &block
      b = if block_given?; block else
        arr = []; lambda{ |x| arr.push(x) }
      end
      c = (@current ||= 1); found = nil
      c.upto(size-1){ |i| self[i].first==name and found=i and break }
      found.nil? and fail("no where in sexp: #{name.inspect}")
      until(name == self[@current].first || @current >= size)
        b.call self[@current]
        @current += 1
      end
      arr unless block_given?
    end
    def with name
      fail("not current: #{name.inspect}") unless self[@current].first == name
      ret = block_given? ? yield(self[@current]) : self[@current]
      @current += 1
      ret
    end
    def until_end &block
      b = if block_given?; block else
        arr = []; lambda{ |x| arr.push(x) }
      end
      until @current >= size; b.call(self[@current]); @current += 1; end
      arr unless block_given?
    end
    # end sexp scanner methods
  end
  module Standardy
    include ElementsSelector

    @modules = Hash.new do |h,k| h[k] =
      k.split( CONST_SEP_ ).inject(Object){ |m,n| m.const_get n }
    end
    class << self
      attr_reader :modules
    end
    def build_sexp(name, *childs)
      (sexp_class || sexp_class_guess(name)).build(name, *childs)
    end
    def sexp
      standard_sexp
    end
    def standard_sexp
      if elements.nil?
        build_sexp(sexp_node_name, text_value)
      else
        build_sexp(sexp_node_name, * sexp_tail_recursive(self))
      end
    end
    def sexp_class
      nil # ovverride in the grammar or syntax node if necessary
    end

    def sexp_class_guess name

      modul = Resolve_some_descriptive_module_[ self ]

      _thing = modul.name.match( RX__ )[1]

      mod = Standardy.modules[ _thing ]

      cls = name.to_s.gsub(/([a-z])_([a-z])/){ "#{$1}#{$2.upcase}" }.
        sub(/^([a-z])/){ $1.upcase } << "Sexp"

      if mod.const_defined? cls
        mod.const_get cls
      elsif mod.const_defined? :MySexp
        mod.const_get :MySexp
      else
        Sexpesque
      end
    end

    RX__ = /\A(.+)::[^:]+::[^:]+\Z/
    def sexp_node_name
      guess_node_name
    end
    def sexp_tail_recursive node
      sexps = []
      cx = node.respond_to?(:sexp_selector) ?
        node.elements_at(node.sexp_selector) : node.elements
      cx.each do |el|
        if el.nil?
          # always ignored, changes structure
        elsif el.respond_to?(:sexp)
          s = el.sexp
          s.nil? or sexps.push s # careful! this changes structure of things
        elsif el.elements.nil?
          t = el.text_value
          t == "" or sexps.push t # ditto here, changes structure
        else
          sexps.concat sexp_tail_recursive(el) # flatten it!
        end
      end
      if sexps.any? && sexps.index{|x| ! x.kind_of?(String)}.nil?
        sexps = [ sexps * '' ]
      end
      sexps
    end
    def guess_node_name
      mod = Resolve_some_descriptive_module_[ self ]
      m = mod.name.match %r(([^:]*[^:0-9])\d+$)
      m[1].gsub(/([a-zA-Z])([A-Z])/){ "#{$1}_#{$2}" }.downcase.intern if m
    end
  # alternate version below, does last not first. keep it lying around for now
  # extreme haxie: find the last ancestor that has the same containing
  # module as the first.  deduce rule used by using this module name.
  # def guess_node_name
  #   m = singleton_class.ancestors.first.to_s.match(/(\A.+[^:])::[^:]+\z/) or
  #     return nil
  #   idx = singleton_class.ancestors.index{ |x| 0 != x.to_s.index(m[1]) }
  #   m = singleton_class.ancestors[idx-1].to_s.match(/([^:]*[^:0-9])\d+$/)
  #   m[1].gsub(/([a-zA-Z])([A-Z])/){ "#{$1}_#{$2}" }.downcase.intern if m
  # end
    def singleton_class
      @sc ||= class << self; self end
    end
  end

  Build_requirer_proc__ = -> & init_constants do

    # as long as we are :[#.B] in a single file, we don't have autoloading
    # to give us regressable parsimony. instead, we do this "late making".

    p = -> do
      init_constants[]
      p = EMPTY_P_
      NIL_
    end
    -> do
      p[]
    end
  end

  # ~ "abstractable" LEGACY

  Require_treetop_dependant_classes___ = Build_requirer_proc__.call do

    # (made late because of its unique dependency on this outside library.
    #  assume that said library is already loaded when this is called.)
    # <-

  class Standard < ::Treetop::Runtime::SyntaxNode
    include Standardy
  end

  class TreetopBuilder___ < ::Treetop::Compiler::RubyBuilder

    def express_output_progressively_into io
      @ruby = ::Enumerator::Yielder.new do | s |
        io.write s
      end
      NIL_
    end

    def rule_declaration name, &block
      self << "rule #{name}"
      indented(&block)
      self << "end"
    end

    def grammar_declaration(name, &block)
      self << "grammar #{name}"
      indented(&block)
      self << "end"
    end

    def write *a
      @ruby.<<(*a)
    end
  end
# ->
  end

  Require_pp_rhs___ = Build_requirer_proc__.call do

    # (made late for regressibility: a unique dependency on an outside lib.)

    require 'pp'
    # <-
  class PpRhs < ::PP
    def initialize(*a)
      @ctx = a.pop
      super(*a)
    end
    attr_accessor :ctx
    alias_method :execution_context, :ctx
    def pp_rhs node
      Thread.current[MyInspectKey] ||= []
      id = node.__id__
      if Thread.current[MyInspectKey].include? id
        group { node.pretty_print_cycle self } # just to be safe!
        return
      end
      begin
        Thread.current[MyInspectKey] << id

        p = @ctx.remove_any_in_the_future_proc
        if p
          p.call node
        end

        group { node.pretty_print_rhs self }

        _x = if node.respond_to? :first
          node.first
        else
          node.class.name
        end

        @ctx.prev_node_name = _x
      ensure
        Thread.current[MyInspectKey].pop unless PP.sharing_detection
      end
    end
    def break
      flush
      @output << @newline
      @output << @genspace.call(@indent)
      @output_width = @indent
      @buffer_width = 0
    end
  end

  # MyInspectKey = ::PP::PPMethods::InspectKey
  MyInspectKey = :sl_y2tt
# ->
  end

  class Minimal_Template___  # a tiny fraction of ERB in one screen of code

    class << self

      def call datasrc, str

        io = Build_string_IO__[]
        new( io, datasrc, str ).execute
        io.rewind
        io.read
      end
      private :new
    end  # >>

    def initialize out, datasrc, template_s
      @datasource = datasrc
      @out = out
      @str = template_s
    end

    def execute
      parsed.each do | m, * a |
        send m, * a
      end
      NIL_
    end

  private  # ~ (legacy)

    def parsed
      instance_variable_defined?('@parsed') and return @parsed
      @parsed = []
      pos = 0
      scn = Build_string_scanner__[ @str ]
      until scn.eos?
        if (! size_skipped = scn.skip_until(/<%= */))
          @parsed.push [:string, scn.rest]
          break
        else
          raw = scn.string.slice(pos, size_skipped - scn.matched.size)
          raw != "" and @parsed.push [:string, raw]
          name = scn.scan(/[_a-z]+/) or fail("bad varname: #{scn.rest}")
          scn.skip_until(/ *%>/) or fail("\"%>\" not found: #{scn.rest}")
          pos = scn.pos
          @parsed.push [:write_variable, name.intern]
        end
      end
      @parsed
    end

    def write_variable name
      @out.write @datasource.send(name)
    end

    def string s
      @out.write s
    end
  end

  Build_string_IO__ = -> do
    p = -> do
      require 'stringio'
      p = -> do
        ::StringIO.new
      end
      p[]
    end
    -> do
      p[]
    end
  end.call

  Build_string_scanner__ = -> do
    p = -> s do
      require 'strscan'
      p = -> s_ do
        ::StringScanner.new s_
      end
      p[ s ]
    end
    -> s do
      p[ s ]
    end
  end.call

  module Grammars
    class MySexp < Sexpesque
      def translate c
        s = Build_string_IO__[]
        PP.pp(self, s)
        s.rewind
        c.builder << "Help, fixme: #{s.read}"
      end
      # debugging and development only!! @todo
      def pretty_print_rhs q
        q.group(1, 'pprhs![', ']') {
          q.seplist(self) { |v|
            if v.respond_to?(:pretty_print_rhs)
              q.pp_rhs(v)
            else
              q.pp(v) # usually symbols & strings
            end
          }
        }
      end
    end
    class SpecSexp < MySexp

      def translate c

        @ctx = c
        @nest = [ lambda{ go_rules } ]

        if c.do_wrap_in_grammar
          go_grammar
        end

        if c.do_autogenerated_comment
          go_autogenerated_comment
        end

        @nest.pop.call
      end

      def go_autogenerated_comment
        @ctx.downstream.puts @ctx.build_autogenerated_text
      end

      def go_grammar

        parts = @ctx.wrap_in_grammar.split CONST_SEP_

        gname = parts.pop
        @nest.push lambda{@ctx.builder.grammar_declaration(gname, &@nest.pop)}
        while mod = parts.pop
          @nest.push lambda{ |mymod| lambda {
            @ctx.builder.module_declaration(mymod, &@nest.pop)
          } }.call(mod)
        end
      end
      def go_rules
        self[1..-1].each{ |sexp| sexp.translate(@ctx) }
      end
    end

    class SpaceSexp < MySexp
      def translate c
        self[1..-1].each { |ch| ch.translate(c) }
      end
      def pretty_print_rhs q
        self[1..-1].each { |ch| q.pp_rhs(ch) }
      end
    end

    class CCommentSexp < MySexp

      def translate c
        c.builder << (s = unindented_ruby_comment_block)
        if s.index NEWLINE_
          c.builder.newline
        end
      end

      def pretty_print_rhs q
        q.text(s = unindented_ruby_comment_block)
        q.break
        if s.index NEWLINE_
          q.break
        else

          if :c_comment == q.ctx.prev_node_name

            q.execution_context.set_in_the_future_proc do | node |
              if :c_comment != node.first
                q.break
              end
            end
          end
        end
      end

    private

      def unindented_ruby_comment_block
        "# #{ self[ 1 ].strip.gsub NEWLINE_, "\n# " }"
      end
    end

    class RuleSexp < MySexp
      def translate c
        each_before(:rule_name){ |ch| ch.translate(c) }
        b = c.builder

        use_name = with :rule_name do | ch |
          c.yacc_name_to_rule_name ch[ 1 ]
        end

        b.rule_declaration(use_name) do

          Require_pp_rhs___[]

          q = PpRhs.new(c.downstream, c.screen_width || 79, c)
          q.guard_inspect_key do # very very unlikely to be necessary but meh
            b.write SPACE_ * b.level
            q.nest(b.level) do
              until_end { |ch| q.pp_rhs(ch) }
            end
          end
          q.flush
          b.newline
        end
      end
    end

    class SequenceSexp < MySexp
      def pretty_print_rhs q
        q.group(1) {
          # q.seplist(self[1..-1], lambda{ q.breakable( SPACE_ ) }) { |v|
          #   q.pp_rhs v
          # }
          first = true
          self[1..-1].each do |v|

            if ! ( first || :w3c_range == v.first )
              q.breakable SPACE_
            end

            first = false
            q.pp_rhs(v)
          end
        }
      end
    end

    class ChoiceSexp < MySexp
      def pretty_print_rhs q
        q.group(1) do
          first = true
          self[1..-1].each do |v|
            if first
              q.pp_rhs(v)
              first = false
            elsif v.first == :w3c_range
              q.pp_rhs(v)
            else
              q.text ' / '
              q.pp_rhs(v)
            end
          end
        end
      end
    end

    class RuleNameSexp < MySexp
      def pretty_print_rhs q
        q.text q.execution_context.yacc_name_to_rule_name self[ 1 ]
      end
    end

    class LiteralSexp < MySexp # @todo test '\123' etc!!
      def pretty_print_rhs q
        # for now output them quiet literally but in doubles not singles
        q.text "\"#{self[1]}\""
      end
    end

    class W3cRangeSexp < MySexp
      def pretty_print_rhs q
        q.text self[1]
      end
    end

    class W3cGroupingSexp < MySexp
      def pretty_print_rhs q
        q.group(0, '( ', ' )') {
          q.seplist(self[1..-1], lambda{ q.breakable( SPACE_ ) }) { |v|
            q.pp_rhs v
          }
        }
      end
    end
  end

  Resolve_some_descriptive_module_ = -> modul do
    a = modul.singleton_class.ancestors
    a.detect { |mod| ::Module == mod.class } or self._WAT
  end


  GRAMMAR_TEXT__ = <<-'TREETOP_GRAMMAR'
# The treetop grammar below is derived from parts of
#   http://dinosaur.compilertools.net/yacc/index.html
# and parts of a YACC-like grammar presented at
#   http://www.w3.org/TR/css3-selectors/
# It is not going to parse all YACC grammars, just those
# necessary for this project. (e.g. it only parses the 'rules'
# section, not the declarations or programs section.)

module Skylab
module Yacc2Treetop
module Grammars
grammar Yacc3wSpec
  rule spec
    space? (rool space?)+ space? <Standard> { }
  end
  rule space
    ( white / c_comment )+ <Standard> {
      def sexp
        case (sexp = standard_sexp).size
          when 1; nil
          when 2; sexp[1] == '' ? nil : sexp[1]
          else; sexp
        end
      end
    }
  end
  rule rool
    rule_name space? ':' space? pattern space? ';' <Standard> {
      def sexp_node_name; :rule                  end
      def sexp_selector;  '[0],[1],[3],[4],[5]'  end
    }
  end
  rule rule_name
    [a-zA-Z._] [a-zA-Z._0-9]* <Standard> { }
  end
  rule pattern
    choice / sequence / space? <Standardy> { }
  end
  rule choice
    choice_part space? pipe space? choice_part ( space? pipe space? choice_part )*
    <Standard> { }
  end
  rule pipe
    '|' <Standard> { def sexp; end }
  end
  rule choice_part
    sequence / space+
  end
  rule sequence
    pattern_part ( space+ pattern_part )* <Standard> { }
  end
  rule pattern_part
    ( rule_name / literal / w3c_grouping ) w3c_range?
  end
  rule literal
    "'" ( '\\' ( [nr'\\tbf] / [0-9] 3..3 ) / [^'] ) "'" <Standard> {
      def sexp_selector;    '[1]'             end
    }
  end
  rule w3c_range
    ( '*' / '+' / '?' ) <Standardy> { }
  end
  rule w3c_grouping
    '[' space? pattern space? ']' <Standard> {
      def sexp_selector;     '[1],[2],[3]'     end
    }
  end
  rule c_comment
    '/*' ( !'*/' ( . / "\n" ) )* '*/' <Standard> {
      def sexp_selector;  '[1]'                   end
    }
  end
  rule white
    [ \t\n\r\f]+ <Standard> { def sexp; nil end }
  end
end
end
end
end
TREETOP_GRAMMAR

  # ~ constants (atomic)

  ACHIEVED_ = true
  CONST_SEP_ = '::'
  DASH_ = '-'
  EMPTY_P_ = -> {}
  Home_ = self
  GENERIC_ERROR_EXITSTATUS_ = 5
  Lib_ = nil  # for [sl]
  NEWLINE_ = "\n"
  NIL_ = nil
  SPACE_ = ' '
  SUCCESS_EXITSTATUS_ = 0
  UNABLE_ = false
  UNDERSCORE_ = '_'
end

if $PROGRAM_NAME == __FILE__

  _x = Skylab::Yacc2Treetop::CLI.new( $stdin, $stdout, $stderr, [ $PROGRAM_NAME ] ).
    invoke ARGV

  $stderr.puts "(exitstatus: #{ _x })"
end
