#!/usr/bin/env python3 -W default::Warning::0


def _CLI(sin, sout, serr, argv):
    from script_lib.cheap_arg_parse import cheap_arg_parse
    return cheap_arg_parse(
            CLI_function=_do_CLI,
            stdin=sin, stdout=sout, stderr=serr, argv=argv,
            formal_parameters=(
                ('<file>',
                 'The input file to look for timestamps in.',
                 "Use '-' to read from STDIN."),),
            description_template_valueser=lambda: {})


def _do_CLI(monitor, sin, sout, serr, path):
    """
    A one-off script (possibly re-usable) meant to format streams of lines

    that may contain timetamps of a certain format.

    (The commit message from the birth commit of this script contains the
    only input data ever we ever used against it.)

    An internal, hard-coded pattern is employed to match timestamps of a
    certain format. For every line that matches the pattern whose previous
    line also matches the pattern, we do simple arithmatic to *replace*
    the timestamp portion of the *latter* line to instead show the time
    elapsed between the two times (duration).

    (It's a major UX issue having the duration of the previous "item" occur
    on each next line, but this is just a sketch for now.)
    """

    from script_lib import OPEN_UPSTREAM
    opened = OPEN_UPSTREAM(serr, '<file>', path, sin)
    if opened is None:
        return 567

    w = serr.write

    if True:  # legacy indent

        def receive_parsed_line(o):

            tot_secs = o.pretend_epoch_seconds
            tot_mins, secs = divmod(tot_secs, 60)
            hours, mins = divmod(tot_mins, 60)

            _ = '+%02d:%02d:%02d' % (hours, mins, secs)

            w(f'{o.left_margin}{_}{o.the_rest}')

        def receive_other_line(line):
            w(line)

        mp = _MadParse(
                receive_parsed_line=receive_parsed_line,
                receive_other_line=receive_other_line)

    recv = mp.receive_line
    with opened as lines:
        for line in lines:
            recv(line)

    serr.write('done!\n')
    return monitor.exitstatus


class _MadParse:  # the [#608.4] "mad parse" pattern
    """look for lines that have timestamps and also follow (immediately)

    another line that has a timestamp. when this "pattern" is matched,
    do a thing.
    """

    def __init__(self, receive_parsed_line, receive_other_line):
        import re
        self._regex = re.compile(
                r'^([ ]*)'      # left margin
                r'(\d\d):'      # hours
                r'(\d\d):'      # minutes
                r'(\d\d)'       # seconds
                r'([ ]+.+\n)')  # the rest

        self.receive_parsed_line = receive_parsed_line
        self.receive_other_line = receive_other_line
        self._state = '_receive_line_when_looking'

    def receive_line(self, line):
        getattr(self, self._state)(line)

    def _receive_line_when_looking(self, line):
        md = self._regex.match(line)
        if md is None:
            self.receive_other_line(line)
        else:
            self.__receive_first_matching_line(md)

    def __receive_first_matching_line(self, md):
        self._record_of_reference = _record_via_matchdata(md)
        self._state = '_receive_line_after_matching_line'
        self.receive_other_line(md.string)

    def _receive_line_after_matching_line(self, line):
        md = self._regex.match(line)
        if md is None:
            del(self._record_of_reference)
            self._state = '_receive_line_when_looking'
            self.receive_other_line(line)
        else:
            prev = self._record_of_reference
            curr = _record_via_matchdata(md)
            self._record_of_reference = curr
            secs = prev.distance_in_seconds_to(curr)
            self.receive_parsed_line(_record_as_distance(secs, curr))


class _record_as_distance:

    def __init__(self, secs, formatting):
        self.pretend_epoch_seconds = secs
        self.left_margin = formatting._left_margin
        self.the_rest = formatting._the_rest


class _record_via_matchdata:

    def __init__(self, md):
        (self._left_margin,
         hours,
         minutes,
         seconds,
         self._the_rest) = md.groups()

        self._hours = int(hours)
        self._minutes = int(minutes)
        self._seconds = int(seconds)

        pretend_epoch_minutes = 60 * self._hours + self._minutes
        self._pretend_epoc_seconds = 60 * pretend_epoch_minutes + self._seconds

    def distance_in_seconds_to(self, other):
        return other._pretend_epoc_seconds - self._pretend_epoc_seconds


# --

if '__main__' == __name__:
    import sys as o
    exit(_CLI(o.stdin, o.stdout, o.stderr, o.argv))

# #born.
