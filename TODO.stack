basic game (as a separate module)
structure viz (ASCII)
something about config files parsing like commmand line arguments
game model
(explode "basic game" into milestones for a new phase)
(below is the end of the phase)
sessions
slack
IRC
telnet
scheduler
look at JSON parsing
look at pack/unpack
start kicker
is inotify a thing
basic IPC between processes in python
  many lessons
  commit the markdown that is a snapshot of the TOC
  that one-off
cover: parameters integrated into a hello world
  wish: consts not strings (or enum type)
  cover: the behavior when a parameter isn't found
  refactor: use `yield` in description functions
  cover: modeling parameters
  cover: the magnet on the failure path
  cover: the magnet on the success path
  cover: test thing: tees, debugging output
  cover: the remaining memoizers in helper.py
  look into re efficiency
  look up doc string conventions again to figure out if that extra line is right
sub-project: proof-of-concept search tool "JSON grep"
  [reserved for final cleanup & overflow]
  integrate real search
  implement & cover real backend for search
  integrate dummy story - ajax-pagination YIKES
  [reserved for unforseen milestones]
  integrate dummy story - no pagination, hard-coded limit
  integrate (& redesign as necessary) full integration for indexing
  implement & cover real backend for "indexing"
  dummy ajax interface for "indexing"
  integrate with front - fudge time maybe
  real backend for indexing
  mocked frontend for indexing
XXX - static_files
get main out of the bundle names
get purple ranger etc out
sub-project: upload files to s3
  integrate everything
  some kind of coverage of these five cases integrated
  cover: backend s3 put (when succeed)
  cover: backend s3 put (when fail)
  do the yes/no dialog (when yes (mock response))
  do the yes/no dialog (when not understood)
  do the yes/no dialog (when no)
  detect any time anyone uploads a file (in any channel)
  detect any time anyone uploads a file (in one channel)
====
  commit: do fake work ASYNCHRONOUSLY
  (the below might could knock out the above buttons-related branch)
  commit: now, instead of sending a message, present buttons ASYNCHRONOUSLY (or not)
  commit: now, instead of sending a message, present buttons SYNCHRONOUSLY
  commit: get the bot to send a message to slack in response to the minmal event ASYNCHRONOUSLY
  commit: get the bot to send a message to slack in response to the minmal event SYNCHRONOUSLY
  visual: get the bot to send a message to slack in a REPL
  commit: visual demo with tasks in own file
  grind-down: visual demo with templates broken up
==
  after "sakin agac" acceptance, take a swing at #wish [#021] coverage testing
  integrate
  generate thumbs
  tag-based query
  show/hide commentary
  design (nonworking static layout)
  react tutorial
  sftp a static tree to heroku
  static page on heroku
  bleeding edge on heroku
  bleeding edge locally
  see if you can get it working on heroku
  get wiki.js working locally following the instructions
04:15 Tutorial #30 - Create Custom Error Pages
06:50 Tutorial #29 - Make PUT Request using jQuery in Play Framework
08:52 Tutorial #28 - Make Delete Request using jQuery in Play Framework
13:27 Tutorial #27 - Form Validations in Play
10:15 Tutorial #26 - Update Views Part 2
08:37 Tutorial #25 - Update Views Part 1
03:43 Tutorial #24 - Include Bootstrap and jQuery in Play Framework
07:28 Tutorial #23 - Add Support For MySQL Database in Play Framework
08:50 Tutorial #22 - Update Book Model And Perform CRUD Operations in H2 Database
08:34 Tutorial #21 - Enable Ebean ORM & JDBC Support
07:12 Tutorial #20 - Refactoring Views Of BookStore Application
04:31 Tutorial #19 - in Java: Implement Delete Method of BookStore Application
04:46 Tutorial #18 - Implement Show Method of BookStore Application
04:19 Tutorial #17 - Implement Update Method of BookStore Application
05:32 Tutorial #16 - Implement Edit Method Of BookStore Application
05:30 Tutorial #15 - Implement Save Method Of BookStore Application
10:08 Tutorial #14 - Implement Create Method Of BookStore Application
05:06 Tutorial #13 - Index Method of BookStore Application
07:43 Tutorial #12 - Implement Book Model in Play Framework
(-1) try to install every CMS
(-2) notes on every CMS (read their each webpage etc) (dedicated MD table)
? worldwide refactor: [#508] (the emissions thing)
? worldwide refactor: you did lots of `@property` you did not need
☑️ find a parser generator that satisfies that one requirement
☑️ yikes do deep survey against all the options
? turn soft notes into tags (for no real reason except posterity))
(-3) filter_by built with tag lyfe
(-4) clean up producers - make these scripts more DRY, "elegant"
(-5) tag lyfe parse tag treee: compound (deep) values
(-6) tag lyfe parse tag trees with atom values (collision)
(-7) tag lyfe parse tag trees with atom values (no collision)
we have accumulated several #todo's
refactor/feature idea: don't rebuild separator runs into strings - it willl be inefficient for the intended use case
