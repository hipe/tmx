#!/usr/bin/env ruby -w

require 'skylab/test_support'

program = -> argv, i, o, e, pn_a, & p do

  _Q = Skylab::TestSupport::Quickie

  inst = if _Q.daemon_is_running__

    e.puts "(notice - a quickie daemon is already running. #{
      }creating non-daemonized instance.)"

    _Q.build_instance_around__ i, o, e, pn_a
  else
    _Q.start_daemon_around i, o, e, pn_a
  end

  _ok = if p
    p[ inst ]
  else
    true
  end

  if _ok

    x = inst.receive_argv argv
    if x.nil?
      0
    elsif true == x
      0
    else
      x
    end
  end
end

# without always assigning the below const, when quickie is used to test
# its own integration under tmx, the tmx "front loader" will load this file
# a second time. on any such subsequent time the file is loaded, the below
# boolean test will again result in "true" (as it was when we invoked this
# whole test run the first time).
#
# the front loader needs a way to know that it is not necessary to load this
# file. we accomplish that by assigning the const.
# this is a hacky fix to a deeper design problem.
#
# perhaps a better solution would be to get the above logic out of this
# runner but that is contray to the fundamental axiom of tmx.

Skylab::TestSupport_quickie = program

if ::File.basename( __FILE__ ) == ::File.basename( $PROGRAM_NAME )

  _d = program.call ARGV, $stdin, $stdout, $stderr, [ $PROGRAM_NAME ] do |dae|
    dae.listen
  end

  exit _d
else
  Skylab__Zerk__OneOffs::Test_support_quickie = program  # #[#ze-063.1] mountable one-off
end
