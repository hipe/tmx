#!/usr/bin/env ruby -w

# is :[#024].

one_off = ::Object.new
class << one_off
  # -
    def new a, _sin, o, e, pn_s_a

      require 'no-dependencies-zerk'
      @_lib = ::NoDependenciesZerk
      @_listener = method :__receive_emission
      @_args = @_lib::CLI_ArgumentScanner.new a, & @_listener

      @sout = o ; @stderr = e ; @program_name_string_array = pn_s_a
      self
    end

    def execute
      @exitstatus = 0
      ok = true
      ok &&= __parse_arguments
      ok &&= __check_required_arguments
      ok &&= __normalize_and_validate
      ok && __execute_normally
      @exitstatus
    end

    def __normalize_and_validate
      @begin ||= BEGIN__
      @next_begin ||= NEXT_BEGIN___
      if @next_begin <= @begin  # :#here-1
        @_listener.call :error, :expression do |y|
          y << "#{ prim :next_begin } must be after #{ prim :begin }"
        end
        UNABLE_
      else
        ACHIEVED_
      end
    end

    def __check_required_arguments
      @_lib::Check_requireds[ self, %i( @number_of_items ), & @_listener ]
    end

    def __parse_arguments
      if @_args.no_unparsed_exists
        _parse_arguments_normally
      else
        md = %r(\A(?<A>\d+)[-:](?<B>\d+)(?:[-:](?<C>\d+))?\z).match @_args.head_as_is
        if md
          __fun_with_matchdata md
        else
          _parse_arguments_normally
        end
      end
    end

    def __fun_with_matchdata md

      @_args.advance_one
      d_a = [ md[ :A ].to_i, md[ :B ].to_i ]
      # we do this fliparound for convenience, giving the user the
      # freedom to supply the first two numbers in the "wrong" order.
      # but note that if they are equal it is validated against #here-1
      if d_a.first > d_a.last
        d_a.reverse!
      end
      @begin, @next_begin = d_a
      s = md[ :C ]
      if s
        @number_of_items = s.to_i
      end
      if @_args.no_unparsed_exists
        ACHIEVED_
      else
        _parse_arguments_normally
      end
    end

    def _parse_arguments_normally
      @_lib::ParseArguments_via_FeaturesInjections.call @_args, PRIMARIES___, self
    end

    PRIMARIES_DESCRIPTIONS___ = {
      begin: -> y do
        y << "default: #{ BEGIN__ }"
      end,
      next_begin: -> y do
        y << "default: #{ NEXT_BEGIN___ }"
      end,
      number_of_items: -> y do
        y << "positive nonzero integer."
      end,
      help: -> { "this screen" },
    }

    PRIMARIES___ = {
      begin: :_parse_non_neg_integer,
      next_begin: :_parse_non_neg_integer,
      number_of_items: :__parse_positive_nonzero_integer,
      help: :__express_help,
    }

    def __express_help

      require 'skylab/zerk'
      _Help = ::Skylab::Zerk::NonInteractiveCLI::Help

      h = PRIMARIES_DESCRIPTIONS___

      _Help::ScreenForEndpoint.express_into @stderr do |o|
        o.primary_symbols h.keys
        o.express_usage_section __program_name_plus
        o.express_freeform_section __freeform_description_by
        o.express_items_sections h
      end

      NIL  # EARLY_END_
    end

    def __program_name_plus
      "#{ _program_name } [ BEGIN:NEXT_BEGIN[:N] ] "
    end

    def __freeform_description_by

      my_program_name = _program_name

      -> serr do

        serr.puts "synopsis: choses numbers for N items given a numberspace"
        serr.puts

_body_string = <<-HERE
theory and algorithm:

the outcome of this appears really simple (and it is), but here's the theory
behind it:

we are placing positive nonzero N items into a range of 2-dimensional space.

every item will have a same size "buffer" to its "left" and to its "right".

so with '0' as the lower boundary and '10' as the upper and one item:

    #{ my_program_name } 0:10:1  # => 5.0

the item has a buffer 5 units long to its left (0-5) and one 5 units
long to is right (5-10).

each "buffer" "belongs" to only one item, so buffers are distributed in
this pattern whereby there are two buffers between each adjacent item:

    lower-limit buffer item buffer buffer item buffer buffer item [..] buffer upper-limit

so:

    #{ my_program_name } 10:14:2  # => 11.0, 13.0

the first item (at 11.0) has a buffer to its left of 10-11, and one to
its right of 11-12. the second item has the buffers 12-13 and 13-14.

we implement this by determining the number of buffers, which is simply
N * 2, and dividing the available space by that amount. this gives us
the buffer width, which we use to calculate each next position of each
next item.
        HERE

        serr.write _body_string
        ACHIEVED_
      end
    end

    def __parse_positive_nonzero_integer
      _store @_args.current_primary_as_ivar, @_args.parse_positive_nonzero_integer
    end

    def _parse_non_neg_integer
      _store @_args.current_primary_as_ivar, @_args.parse_non_negative_integer
    end

    def __receive_emission * chan, & em_p

      sct = @_lib::CLI_Express_via_Emission.call_by do |o|
        o.emission_proc_and_channel em_p, chan
        o.client = self  # for `data`
      end
      if sct && sct.was_error
        @stderr.puts "see `#{ _program_name } -help`"
      end
      NIL
    end

    def _program_name
      @___program_name ||= __program_name
    end

    def __program_name
      # @program_name_string_array.join SPACE_
      ::File.basename @program_name_string_array.last  # looks better in help screen to be shorter
    end

    def __execute_normally

      # (all numbers are rational until final output)

      sout = @sout
      item = -> ra do
        sout.puts ra.to_f
      end

      begin_rational = Rational( @begin )

      _end_rational = Rational( @next_begin )

      _full_distance = _end_rational - begin_rational

      number_of_buffers = ( @number_of_items - 1 ) * 2 + 2

      buffer_distance = _full_distance / number_of_buffers

      jump_distance = buffer_distance * 2

      first_point = begin_rational + buffer_distance

      @number_of_items.times do |d|
        item[ first_point + ( jump_distance * d ) ]
      end

      NIL
    end

    def _store ivar, x
      if x
        instance_variable_set ivar, x ; ACHIEVED_
      else
        x
      end
    end

    attr_reader(
      :stderr,
    )

    # ==

    ACHIEVED_ = true
    BEGIN__ = 0
    NEXT_BEGIN___ = 1
    SPACE_ = ' '
    UNABLE_ = false
    # ==
  # -
end

if __FILE__ == $PROGRAM_NAME
  exit one_off.new( ARGV, $stdin, $stdout, $stderr, [ $PROGRAM_NAME ] ).execute
else
  Skylab__Zerk__OneOffs::Test_support_subdivide = -> * five do  # #[#ze-063.1] mountable one-off
    one_off.new( * five ).execute
  end
end
