#!/usr/bin/env zsh

envname=$(cat .python-version)

# Make sure head looks like the kind of identifier we make
head=$(grep --extended-regexp --only-matching '^[^0-9]+' <<< "$envname")
if [ '-' != ${head: -1} ]; then
  >&2 echo "strange head: \"$head\""
  exit 2
fi

length=${#head}
head="${head:0: -1}"
tail="${envname:$length}"

# Make sure tail looks like a version string
ok=$(grep --extended-regexp --only-matching '^([0-9]+)(\.[0-9]+)*$' <<< "$tail")
if [ -z "$ok" ]; then
  >&2 echo "expected e.g. \"1.2.34\"; had: \"$tail\""
  exit 2
fi

# Delete the virtual environment
>&2 echo -n "pyenv virtualenv-delete -f $envname"
pyenv virtualenv-delete -f "$envname"
ec="$?"
if [ "$ec" != 0 ]; then
  >&2 echo "failed to delete \"$envname\" (exit code: $ec)"
  exit 2
fi
echo " .. done."

# Create the virtual environment
>&2 echo -n "pyenv virtualenv $tail $envname"
pyenv virtualenv "$tail" "$envname"
ec="$?"
if [ "$ec" != 0 ]; then
  >&2 echo "failed to create virtual environment \"$envname\" (exit code: $ec)"
  exit 2
fi
>&2 echo " .. done."

>&2 echo "pip install --upgrade pip"
pip install --upgrade pip

>&2 echo "Finished clearing the virtual environment."

# #born
