#!/usr/bin/env ruby -w
require 'optparse'
require 'pp'
require 'strscan'
require 'rubygems'
# require 'ruby-debug'; $stderr.puts "\e[1;5;33mruby-debug\e[0m"
require 'treetop'

# Test sexp generation with:
# bundle exec bin/flex-to-treetop -s -c -t./tmp test/fixtures/flex/ideal.flex

# Test grammar generation with:
# bundle exec bin/flex-to-treetop -g"Foo::Bar" test/fixtures/flex/mini.flex -t./tmp -c

# The structure of this file is ridiculous because we're trying to keep it all
# in one file as a standalone thing.  It is, in sequence:
#   0) Sexpesque and CommonNode* and AutoNode* abstraction candidates
#   1) a Cli class to parse commands 2) FlexToTreetop that is the main agent
#   3) Pull in the treetop-generated parser (by one of a variety of ways)
#   4) Subclass it (MyFlexFileParser < FlexFileParser) 5) run this file
#   6) The treetop grammar in put inline after the __END__ for novelty points.

module Hipe
  module FlexToTreetop
    VERSION = '0.0.0'
  end
end

class Hipe::FlexToTreetop::Sexpesque < Array # class Sexpesque
  class << self
    def add_hook(whenn, &what)
      @hooks ||= Hash.new{ |h,k| h[k] = [] }
      @hooks[whenn].push(what)
    end
    def guess_node_name
      m = to_s.match(/([^:]+)Sexp$/) and
        m[1].gsub(/([a-z])([A-Z])/){ "#{$1}_#{$2}" }.downcase.intern
    end
    def hooks_for(whenn)
      instance_variable_defined?('@hooks') ? @hooks[whenn] : []
    end
    def from_syntax_node name, node
      new(name, node).extend SyntaxNodeHaver
    end
    def traditional name, *rest
      new(name, *rest)
    end
    def hashy name, hash
      new(name, hash).extend Hashy
    end
    attr_writer :node_name
    def node_name *a
      a.any? ? (@node_name = a.first) :
      (instance_variable_defined?('@node_name') ? @node_name :
        (@node_name = guess_node_name))
    end
    def list list
      traditional(node_name, *list)
    end
    def terminal!
      add_hook(:post_init){ |me| me.stringify_terminal_syntax_node! }
    end
  end
  def initialize name, *rest
    super [name, *rest]
    self.class.hooks_for(:post_init).each{ |h| h.call(self) }
  end
  def stringify_terminal_syntax_node!
    self[1] = self[1].text_value
    @syntax_node = nil
    class << self
      alias_method :my_text_value, :last
    end
  end
  module SyntaxNodeHaver
    def syntax_node
      instance_variable_defined?('@syntax_node') ? @syntax_node : last
    end
  end
  module Hashy
    class << self
      def extended obj
        class << obj
          alias_method :children, :last
        end
      end
    end
  end
end

module Hipe::FlexToTreetop::CommonNodey
  Sexpesque = ::Hipe::FlexToTreetop::Sexpesque
  def at(str); ats(str).first end
  def ats path
    path = at_compile(path) if path.kind_of?(String)
    here = path.first
    cx = (here == '*') ? elements : (elements[here] ? [elements[here]] : [])
    if path.size > 1 && cx.any?
      child_path = path[1..-1]
      cx = cx.map do |c|
        c.extend(::Hipe::FlexToTreetop::CommonNodey) unless
          c.respond_to?(:ats)
        c.ats(child_path)
      end.flatten
    end
    cx
  end
  def at_compile str
    res = []
    s = StringScanner.new(str)
    begin
      if s.scan(/\*/)
        res.push '*'
      elsif s.scan(/\[/)
        d = s.scan(/\d+/) or fail("expecting digit had #{s.rest.inspect}")
        s.scan(/\]/) or fail("expecting ']' had #{s.rest.inspect}")
        res.push d.to_i
      else
        fail("expecting '*' or '[' near #{s.rest.inspect}")
      end
    end until s.eos?
    res
  end
  def sexp_at str
    # (n = at(str)) ? n.sexp : nil
    n = at(str)
    n or return nil
    n.respond_to?(:sexp) and return n.sexp
    n.text_value == '' and return nil
    fail("where is sexp for n")
  end
  def sexps_at str
    ats(str).map(&:sexp)
  end
  def composite_sexp my_name, *children
    with_names = {}
    children.each do |name|
      got = send(name)
      sexp =
        if got.respond_to?(:sexp)
          got.sexp
        else
          fail('why does "got" have no sexp')
        end
      with_names[name] = sexp
    end
    if my_name.kind_of? Class
      my_name.hashy(my_name.node_name, with_names)
    else
      Sexpesque.hashy(my_name, with_names)
    end
  end
  def list_sexp *foos
    foos.compact!
    foos # yeah, that's all this does
  end
  def auto_sexp
    if respond_to?(:sexp_class)
      sexp_class.from_syntax_node(sexp_class.node_name, self)
    elsif ! elements.nil? && elements.index{ |n| n.respond_to?(:sexp) }
      cx = elements.map{ |n| n.respond_to?(:sexp) ? n.sexp : n.text_value }
      ::Hipe::FlexToTreetop::AutoSexp.traditional(guess_node_name, *cx)
    else
      ::Hipe::FlexToTreetop::AutoSexp.traditional(guess_node_name, text_value)
    end
  end
  def guess_node_name
    m = singleton_class.ancestors.first.to_s.match(/([^:0-9]+)\d+$/)
    if m
      m[1].gsub(/([a-z])([A-Z])/){ "#{$1}_#{$2}" }.downcase.intern
    else
      fail("what happen")
    end
  end
  def singleton_class
    @sc ||= class << self; self end
  end
end

module Hipe::FlexToTreetop
  class CommonNode < ::Treetop::Runtime::SyntaxNode
    include CommonNodey
  end
  module AutoNodey
    include CommonNodey
    def sexp; auto_sexp end
  end
  class AutoNode < CommonNode
    include AutoNodey
  end
end

module Hipe::FlexToTreetop
  class RuleBuilder
    def initialize ctx
      @ctx = ctx
      @builder = ctx.builder
    end
    attr_accessor :rule_name
    attr_accessor :pattern_like
    def write
      @builder.rule_declaration(@ctx.flex_name_to_rule_name(rule_name)) do
        @builder.write "".indent(@builder.level)
        pattern_like.translate(@ctx)
        @builder.newline
      end
    end
  end
  module RuleWriter
    def write_rule ctx
      meth = RuleBuilder.new(ctx)
      yield meth
      meth.write
    end
  end
  class FileSexp < Sexpesque # :file
    def translate ctx
      nest = [lambda {
        children[:definitions].each{ |c| c.translate(ctx) }
        ctx.builder << "# skipping rules for now!!!"
      }]
      if ctx.key?(:grammar)
        parts = ctx[:grammar].split('::')
        gname = parts.pop
        nest.push lambda{
          ctx.builder.grammar_declaration(gname, & nest.pop)
        }
        while mod = parts.pop
          nest.push lambda{
            mymod = mod
            lambda {
              ctx.builder.module_declaration(mymod, & nest.pop)
            }
          }.call
        end
      end
      nest.pop.call
    end
  end
  class StartDeclarationSexp < Sexpesque # :start_declaration
    def translate ctx
      case children[:declaration_value]
      when 'case-insensitive' ; ctx.case_insensitive!
      else
        ctx.builder <<
          "# declaration ignored: #{children[:declaration_value].inspect}"
      end
    end
  end
  class ExplicitRangeSexp < Sexpesque # :explicit_range
    class << self
      def bounded min, max
        min == '0' ? new('..', max) : new(min, '..', max)
      end
      def unbounded min
        new min, '..'
      end
      def exactly int
        new int
      end
    end
    def initialize *parts
      @parts = parts
    end
    def translate ctx
      ctx.builder.write " #{@parts.join('')}"
    end
  end
  class NameDefinitionSexp < Sexpesque # :name_definition
    include RuleWriter
    def translate ctx
      write_rule(ctx) do |m|
        m.rule_name = children[:name_definition_name]
        m.pattern_like = children[:name_definition_definition]
      end
    end
  end
  class PatternChoiceSexp < Sexpesque # :pattern_choice
    def translate ctx
      (1..(last = size-1)).each do |idx|
        self[idx].translate(ctx)
        ctx.builder.write(' / ') if idx != last
      end
    end
  end
  class PatternSequenceSexp < Sexpesque # :pattern_sequence
    def translate ctx
      (1..(last = size-1)).each do |idx|
        self[idx].translate(ctx)
        ctx.builder.write(' ') if idx != last
      end
    end
  end
  class PatternPartSexp < Sexpesque # :pattern_part
    def translate ctx
      self[1].translate(ctx)
      self[2] and self[2][:range].translate(ctx)
    end
  end
  class UseDefinitionSexp < Sexpesque # :use_definition
    def translate ctx
      ctx.builder.write ctx.flex_name_to_rule_name(self[1])
    end
  end
  class LiteralCharSexp < Sexpesque # :literal_char
    terminal!
    def translate ctx
      ctx.builder.write "OHAI_LIT_CHAR"
      # ctx.builder.write self[1].inspect # careful! sloppy
    end
  end
  class CharClassSexp < Sexpesque # :char_class
    terminal! # no guarantee this will stay this way!
    def translate ctx
      ctx.builder.write( ctx.case_insensitive? ?
        hack(my_text_value) : my_text_value )
    end
    def hack txt
      s = StringScanner.new(txt)
      out = ''
      while found = s.scan_until(/[a-z]-[a-z]|[A-Z]-[A-Z]/)
        repl = (/[a-z]/ =~ s.matched) ? s.matched.upcase : s.matched.downcase
        s.scan(/#{repl}/) # whether or not it's there scan over it. careful!
        out.concat("#{found}#{repl}")
      end
      "#{out}#{s.rest}"
    end
  end
  class HexSexp < Sexpesque # :hex
    terminal!
    def translate ctx
      ctx.builder.write "OHAI_HEX_SEXP"
    end
  end
  class OctalSexp < Sexpesque # :octal
    terminal!
    def translate ctx
      ctx.builder.write "OHAI_OCTAL_SEXP"
    end
  end
  class AsciiNullSexp < Sexpesque # :ascii_null
    terminal!
    def translate ctx
      ctx.builder.write "OHAI_NULL_SEXP"
    end
  end
  class BackslashOtherSexp < Sexpesque # :backslash_other
    terminal!
    def translate ctx
      ctx.builder.write my_text_value.inspect # carful!
    end
  end
  class ActionSexp < Sexpesque # :action
    terminal!
    def translate ctx
      ctx.builder.write "OHAI ACTION"
    end
  end
  class AutoSexp < Sexpesque
    def translate ctx
      self[1..size-1].each do |c|
        if c.respond_to?(:translate)
          c.translate(ctx)
        else
          ctx.builder.write c
        end
      end
    end
  end
end

module Hipe::FlexToTreetop

  class << self
    def cli
      @cli ||= Cli.new
    end
  end
  class ProgressiveOutputAdapter
    def initialize stream
      @out = stream
    end
    def <<(*a)
      @out.write(*a)
      self
    end
  end
  class TreetopBuilder < ::Treetop::Compiler::RubyBuilder
    def initialize out
      super()
      @out = out
    end
    def progressive_output!
      @ruby = ProgressiveOutputAdapter.new(@out)
    end
    def rule_declaration name, &block
      self << "rule #{name}"
      indented(&block)
      self << "end"
    end
    def grammar_declaration(name, &block)
      self << "grammar #{name}"
      indented(&block)
      self << "end"
    end
    def write *a
      @ruby.<<(*a)
    end
  end
  class TranslationContext < Hash
    def initialize out, err
      @out = out; @err = err
      @builder = TreetopBuilder.new(@out)
      set_boolean(:case_insensitive, false)
      make_boolean_setter(:case_insensitive)
    end
    attr_reader :out, :err, :builder
    def set_boolean name, val
      self[name] = val
      unless respond_to?("#{name}?")
        singleton_class.send(:define_method, "#{name}?"){ self[name] }
      end
    end
    def make_boolean_setter name
      singleton_class.send(:define_method, "#{name}!"){ self[name] = true }
    end
    def singleton_class
      @sc ||= class << self; self end
    end
    ### abstractable above
    def flex_name_to_rule_name flex_name
      flex_name # @todo prefixes, whatever
    end
  end

  class Cli
    def initialize
      @err = $stderr
      @out = $stdout
      @in =  $stdin
      @context = TranslationContext.new(@out, @err)
    end
    def out *a
      @out.puts(*a)
    end
    def err *a
      @err.puts(*a)
    end
    def run argv
      begin
        option_parser.parse!(argv)
        if instance_variable_defined?('@actions')
          if ! @in.tty?
            usage "can't read from STDIN when doing "+
              @actions.map(&:to_s).join(' ')
          else
            resp = nil
            @actions.each{ |meth| resp = send(meth) }
            resp
          end
        elsif @in.tty?
          if @tempfile_loaded && argv.empty? # allowed for parse checks
            err 'No file arguments present.  Done.'
          elsif argv.size != 1
            usage "expecting <flexfile> had: (#{argv.join(' ')})"
          else
            if ! File.exist?(infile = argv.shift)
              usage "<flexfile> not found: #{infile}"
            else
              infh = File.open(infile, 'r')
              _run(infh)
            end
          end
        else
          if argv.size != 0
            usage "reading STDIN as <flexfile>, had: (#{argv.join(' ')})"
          else
            _run(@in)
          end
        end
      rescue ::OptionParser::InvalidOption => e
        usage e.message
      end
    end
    # we have to parse it ourselves because OptionParser doesn't allow partial
    def parse_tempfile_option argv
      have = argv.each_with_index.map do |v,i|
        (m = /^(?:-t(.*)|--tempdir(?:=(.+))?)$/.match(v) ) ?
          [m.captures,i] : nil
      end.compact
      case have.size
        when 0 ; return
        when 1 ;
        else   ; return fatal("cannot process more than one --tempdir option")
      end
      pair = have.first
      argv[pair[1]] = nil # probably not necessary
      pair.first.detect{ |x| x } || ""
    end
    def process_tempfile_option argv
      tempdir = parse_tempfile_option(argv) or return
      clear = false
      argv.each_with_index do |v, idx|
        if ['-c', '--clear'].include?(v)
          clear = true
          argv[idx] = nil
        end
      end
      argv.compact!
      if "" == tempdir
        require 'tmpdir'
        tempdir = Dir.tmpdir
      end
      treetop_path = File.join(tempdir, 'flex-to-treetop.treetop')
      parser_path  = File.join(tempdir, 'flex-to-treetop.rb')
      if clear
        require 'fileutils'
        [treetop_path, parser_path].each do |path|
          if File.exist?(path)
            FileUtils.rm(path, :verbose => true)
          end
        end
      end
      if File.exist?(parser_path)
        err "using #{parser_path}"
      else
        if ! File.exist?(treetop_path)
          @err.write "Writing grammar file: #{treetop_path}"
          if ! File.directory?(File.dirname(treetop_path))
            return fatal("\nNot a directory: #{File.dirname(treetop_path)}")
          end
          b = nil
          File.open(treetop_path, 'w+'){ |fh| b = fh.write(TreetopGrammar) }
          @err.puts " (wrote #{b} bytes.)"
        end
        if "" == %x{which tt}
          return fatal(
            "`tt` command not found! Is treetop gem installed and in PATH?"
          )
        end
        @err.puts("executing: " + (cmd = "tt #{treetop_path}"))
        res = %x{#{cmd}}
        if "" != res then @err.puts(res) end
      end
      if File.exist? parser_path
        require parser_path
      else
        err "Parser file not found: #{parser_path}"
      end
      @tempfile_loaded = true
    end
  private
    def fatal msg
      err msg
      exit(1)
    end
    def help_string
      option_parser.to_s
    end
    def option_parser
      instance_variable_defined?('@option_parser') and return @option_parser

      @context.set_boolean(:show_sexp, false)
      @context.set_boolean(:progressive_output, true)

      o = OptionParser.new
      o.banner = "Usage: #{program_name} [options] <flexfile>"

      o.on('-g=<grammar>', '--grammar=<grammar>',
      "Also output grammar declaration (or \"Mod1::Mod2::Grammar\")"
      ) { |g| @context[:grammar] = g }

      o.on('-s', '--sexp',
        "(development) Show sexp of parsed flex file and exit"
      ) { @context.set_boolean(:show_sexp, true) }

      o.on('--flex-tt',
       '(development) Write the flex treetop grammar to stdout.'
      ) { self.action = :grammar }

      o.on('-t[=<dir>]', '--tempdir[=<dir>]',
        '(development) Write/Read flex treetop grammar from/to the filesystem.'
      ) { }

      o.on('-c', '--clear',
        "(development) If using --tempdir, clear existing files first."
      ) { }


      o.on('-h', '--help', 'Show this message') { self.action = :help }
      o.on('-v', '--version', 'Show Version') { self.action = :version }

      @option_parser = o
    end

    def program_name
      File.basename($PROGRAM_NAME)
    end

    def action= name
      @actions ||= []
      @actions.push name
    end

    def grammar
      out TreetopGrammar
    end

    def version
      err "#{program_name} version #{VERSION}"
    end

    def help
      err help_string
    end

    def _run in_io
      @context.builder.progressive_output! if @context.progressive_output?
      FlexToTreetop.new(in_io, @out, @err, @context).run
    end

    def usage msg
      err msg
      err help_string
    end
  end
  class FlexToTreetop
    @@loaded = false
    def initialize instream, outstream, errstream, context
      @in = instream; @out = outstream; @err = errstream; @context = context
    end
    def run
      p = parser
      whole_file = @in.read
      @in.close
      resp = p.parse(whole_file)
      if resp.nil?
        rsn = p.failure_reason || "Got nil from parse without reason!"
        @err.puts rsn
      elsif @context.show_sexp?
        PP.pp(resp.sexp, @out)
      else
        resp.sexp.translate @context
      end
    end
  private
    def parser
      @parser ||= MyFlexFileParser.new
    end
  end
end

run = File.basename(__FILE__) == File.basename($PROGRAM_NAME)
cli = Hipe::FlexToTreetop.cli if run

Hipe::FlexToTreetop::TreetopGrammar = DATA.read

if run && ! cli.process_tempfile_option(ARGV)
  ::Treetop.load_from_string Hipe::FlexToTreetop::TreetopGrammar
end

if ! Hipe::FlexToTreetop.const_defined?(:FlexFileParser)
  Hipe::FlexToTreetop.cli.err "Hipe::FlexToTreetop::FlexFileParser not found!"
else

module Hipe::FlexToTreetop
  class MyFlexFileParser < FlexFileParser # gen'd by treetop, see FlexFile

    # CompiledParser#failure_reason overridden for less context
    def failure_reason
      return nil unless (tf = terminal_failures) && tf.size > 0
      "Expected " +
        ( tf.size == 1 ?
          tf[0].expected_string.inspect :
          "one of #{tf.map{|f| f.expected_string.inspect}.uniq*', '}"
        ) + " at line #{failure_line}, column #{failure_column} " +
        "(byte #{failure_index+1}) after#{my_input_excerpt}"
    end

    def num_lines_ctx; 4 end

    def my_input_excerpt
      num = num_lines_ctx
      slicey = input[index...failure_index]
      all_lines = slicey.split("\n", -1)
      lines = all_lines.slice(-1 * [all_lines.size, num].min, all_lines.size)
      nums = failure_line.downto(
        [1, failure_line - num + 1].max).to_a.reverse
      w = nums.last.to_s.size # greatest line no as string, how wide?
      ":\n" + nums.zip(lines).map do |no, line|
        ("%#{w}i" % no) + ": #{line}"
      end.join("\n")
    end
  end
end
end

if run then Hipe::FlexToTreetop.cli.run(ARGV) end

__END__
# The 'pattern' rule below is a subset of the grammar grammar described at
#   http://flex.sourceforge.net/manual/Patterns.html.
#   Note that not all constructs are supported, only those necessary
#   to parse the target flex input files.

module Hipe
module FlexToTreetop
grammar FlexFile
  rule file
    definitions spacey* '%%' spacey* rules spacey*  <CommonNode>
    { def sexp; composite_sexp FileSexp, :definitions, :rules end }
  end
  rule definitions
    spacey*  ( definition_declaration (decl_sep definition_declaration)*  )?
    <CommonNode> {
      def sexp
        list_sexp(sexp_at('[1][0]'), * sexps_at('[1][1]*[1]'))
      end
    }
  end
  rule definition_declaration
    name_definition / start_declaration
  end
  rule name_definition
    name_definition_name [ \t]+ name_definition_definition
    <CommonNode> {
      def sexp
        composite_sexp(
          NameDefinitionSexp, :name_definition_name,
            :name_definition_definition
        )
      end
    }
  end
  rule name_definition_name
    [A-Za-z_] [-a-zA-Z0-9_]* {
      def sexp
        text_value
      end
    }
  end
  rule name_definition_definition
    pattern
  end
  rule start_declaration
    '%' 'option' [ \t]+ 'case-insensitive'
     <CommonNode> {
      def sexp
        StartDeclarationSexp.hashy( :start_declaration,
          :declaration_type  => 'option',
          :declaration_value => 'case-insensitive'
        )
      end
    }
  end
  rule rules
    rool (decl_sep rool)* <CommonNode> {
      def sexp
        list_sexp(sexp_at('[0]'), *sexps_at('[1]*[1]'))
      end
    }
  end
  rule rool
    pattern [ \t]+ action <CommonNode> {
      def sexp
        composite_sexp(:rule, :pattern, :action)
      end
    }
  end
  rule pattern
    pattern_part pattern_part* ( '|' pattern )* <CommonNode> {
      def sexp
        seq = list_sexp(sexp_at('[0]'), * sexps_at('[1]*'))
        choice = sexps_at('[2]*[1]')
        seq_or_pat = seq.size == 1 ? seq.first : PatternSequenceSexp.list(seq)
        if choice.any?
          PatternChoiceSexp.list( [seq_or_pat] + choice )
        else
          seq_or_pat
        end
      end
    }
  end
  rule pattern_part
    ( character_class / string / use_definition / backslashes /
        dot / literal_char / parenthesized_group ) range?
    <CommonNode> {
      def sexp
        els = [sexp_at('[0]')]
        range = sexp_at('[1]') and els.push(:range => range)
        PatternPartSexp.traditional(:pattern_part, *els)
      end
    }
  end
  rule parenthesized_group
    '(' pattern ')' <AutoNode> { }
  end
  rule character_class
    '[' (!']' . / '\]')* ']' <AutoNode> {
      def sexp_class; CharClassSexp end
    }
  end
  rule string
    '"' (!'"' . / '\"')* '"' <AutoNode> { }
  end
  rule use_definition
    '{' name_definition_name '}' <CommonNode> {
      def sexp
        UseDefinitionSexp.traditional(:use_definition, elements[1].text_value)
      end
    }
  end
  rule backslashes
    hex / octal / null / backslash_other
  end
  rule hex
    '\\x' [0-9A-Za-z]+ <AutoNode> { def sexp_class; HexSexp end }
  end
  rule octal
    '\\' [1-9] [0-9]* <AutoNode> { def sexp_class; OctalSexp end }
  end
  rule null
    '\\0' <AutoNode> { def sexp_class; AsciiNullSexp end }
  end
  rule backslash_other
    '\\' [^ \t\n\r\f] <AutoNode> { def sexp_class; BackslashOtherSexp end }
  end
  rule action
    [^\n]+ <AutoNode> { def sexp_class; ActionSexp end }
  end
  rule dot
    '.' <AutoNode> { }
  end
  rule literal_char
    [^\\|/\[\](){} \t\n\r\f] <AutoNode> {def sexp_class; LiteralCharSexp end }
  end
  rule range
    shorthand_range / explicit_range
  end
  rule shorthand_range
    ( '*' / '+' / '?' ) <AutoNodey> { }
  end
  rule explicit_range
    '{' [0-9]+ ( ',' [0-9]* )? '}' <CommonNode> {
      def sexp
        if elements[2].elements.nil?
          ExplicitRangeSexp.exactly(elements[1].text_value)
        elsif "," == elements[2].text_value
          ExplicitRangeSexp.unbounded(elements[1].text_value)
        else
          ExplicitRangeSexp.bounded(elements[1].text_value,
            elements[2].elements[1].text_value
          )
        end
      end
    }
  end
  rule comment
    '/*' ( [^*] / '*' !'/' )* '*/' <AutoNode> {
      def sexp_class; CommentSexp end
    }
  end
  rule spacey
    comment / [ \t\n\f\r]
  end
  rule decl_sep
    ( [ \t] / comment )* newline spacey*
  end
  # http://en.wikipedia.org/wiki/Newline (near OSX)
  rule newline
    "\n" / "\r\n"
  end
end
end
end
