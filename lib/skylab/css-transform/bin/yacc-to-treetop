#!/usr/bin/env ruby -w
require 'optparse'
require 'pp'
# require 'rubygems'
# require 'ruby-debug'; $stderr.puts "\e[1;5;33mruby-debug\e[0m"
# require 'treetop'

module Hipe; end
module Hipe::YaccToTreetop
  VERSION = '0.0.0'
  class << self
    def cli
      @cli ||= Cli.new
    end
  end
  class Context < Hash
    def initialize
      @out = $stdout
      @err = $stderr
    end
    attr_reader :out, :err
  end
  class Cli
    def run argv
      @c = Context.new
      @queue = []
      begin
        option_parser.parse!(argv)
        @queue.push :_run
        @argv = argv
        catch(:early_exit){ @queue.each{ |meth| send meth } }
      rescue OptionParser::InvalidOption => e
        error e.message
      end
    end
    Codes = {:bold=>1,:dark_red=>31,:green=>32,:yellow=>33,:blue=>34,
      :purple=>35,:cyan=>36,:white=>37,:red=>38}
    def color(s, *a); "\e[#{a.map{|x|Codes[x]}.compact*';'}m#{s}\e[0m" end
  private
    def program_name; File.basename($PROGRAM_NAME) end
    def usage
      color('usage:', :bold, :green) << " #{program_name} [opts] <yaccfile>"
    end
    def option_parser
      @op ||= OptionParser.new do |o|
        o.banner = usage
        o.on('--tt-grammar',
          '(debugging) Output the treetop grammar (grammar) to stdout'
        ){ @queue.push :treetop_grammar }
        o.on('-h', '--help', 'Shows this screen'){ @queue.push :help }
        o.on('-v', '--version', 'Display version information'
        ){ @queue.push :version }
      end
    end
    def error msg
      @c.err.puts msg
      @c.err.puts usage
      @c.err.puts invite
    end
    def agent
      @ag ||= Translator.new(@c)
    end
    def help
      @c.err.puts option_parser.to_s
      throw :early_exit
    end
    def invite
      color("#{program_name} -h", :bold, :green) << " for help"
    end
    def version
      @c.err.puts "#{program_name} #{VERSION}"
    end
    def treetop_grammar
      @c.err.puts agent.yacc_treetop_grammar
    end
    def _run
      @argv.size > 1 and return error("too many args. expecting 1 <yaccfile>")
      @argv.size == 0 and return error("missing <yaccfile> argument.")
      @argv.first == '-' and return
      File.exist?(@argv.first) or return error("not found: #{@argv.first}")
      @c.out.puts "running haha ya right #{@argv.first}"
    end
  end
  class Translator
    @yttg = nil
    class << self
      def yacc_treetop_grammar
        @yttg ||= DATA.read
      end
    end
    def initialize ctx
      @c = ctx
    end
    def yacc_treetop_grammar
      self.class.yacc_treetop_grammar
    end
  private
  end
end

::Hipe::YaccToTreetop.cli.run(ARGV) if $PROGRAM_NAME == __FILE__

__END__
# The treetop grammar below is derived from parts of
#   http://dinosaur.compilertools.net/yacc/index.html
# and parts of a YACC-like grammar presented at
#   http://www.w3.org/TR/css3-selectors/
# It is not likely to parse all YACC grammars, just those
# necessary for this project
