# name conventions

## functions / methods

  + `foo_string` -
  result must be a string. must take 0 args. frequently if the
  method has "string" in the name (as opposed to e.g. "render") it implies that
  the string is not collapsed down to one mode (that it is not styled).

  + `foo_line` -
  like above, but of course implies that it probably should not have
  newlines in it. this might be stylized for the particular modality.

  + `foo_lines` -
  must result in enumerable, e.g. array. usually (always?) takes no args.
  this might be stylized for the particular modality.

  (saying "line" or "lines" usually implies a certain mode..)

  + `render_foo` -
  (at one point we thought .. but then we were like ..)
  rendering freqently happens internally (read: protected methods).
  the optimal shape for the method depends largely on what is being done;
  e.g a table might render its each row which would involve rendering each cel.
  memory might be prohibitve to join all the rows into one big string,
  but at the cel-level it might be a best fit to result in strings from
  a method call, etc.
  this said, any such render method that meets any one of the below
  critera must meet the whole criteria, for the below (mutually
  exclusive) variants of form:
  if the method is to take a yielder, it must a) take it as the first
  argument and b) it is strongly encouraged that your result be
  undefined.
  ..

  + the above can have modifiers after them (`foo_string_for_bar`) and
  the guidelines still hold.


## exclamation points

  + they should of course never be used for methods that do not mutate
  the state of the reciever, but that is not to say that they should
  always be used for methods that do! (#todo this is an area of active
  inquiry)
_
    + they should be used as as shorthand for a boolean setter (`debug!`
    that sets a @do_debug for example) (`debug` by the way is a good
    example of a bad method name: is it a boolean? is it a function to
    call when debugging? is it the stream to write out to for debugging?
    is it an integer debug level?)
_
    + they should be used for a method that autovivifies the thing:
      `current_definition!.add_description desc`

    + they should be used to disambiguate from a possibly non-mutating
    form (whether or not it exists), as a high-information-density
    optimizer: `process_param_queue!`, distinct from a form with no '!',
    we can infer from the name that it processes the param queue *and*
    clears at least those items processed from the queue.

    + conversely, with a method like `enqueue`, we do *not* use the '!'
    in it, because it feels sort of like "push", and the name itself sort of
    implies that mutating is happening (and there is no non-mutating
    form that it needs to be disambiguated from).

  a world where exclamations were always used for methods that mutate
  the receiver would be an interesting world indeed, but it would
  probably be way too shouty (consdier basics like `push`). A world
  where there were always few side effects from method calls would also
  be interesting (..)
_
