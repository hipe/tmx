#!/usr/bin/env ruby -w

require_relative '../core'

module Skylab::Slicer

  class SS_Dep__ < Slicer_::Modality_Adapters_::CLI

    def initialize( * )

      @a = []
      @h = {}
      super
    end

    def execute
      if @argv.length.zero?
        __go
      else
        express_usage
      end
    end

    def __go

      @stdout.puts "digraph {"

      _o = Slicer_::Sessions_::Traversal.new

      _o.to_sidesystem_stream.each do | ss |

        ss.find_library

        @h[ ss.const ] = ss
        @a.push ss
      end

      graph_viz_labeller = Slicer_::Output_Adapters_::Graph_Viz::Labeller.new(
        @stdout )

      _ea = Slicer_::Actors_::Determine_and_distribute_medallions[ @a ]

      _ea.each do | ss |
        graph_viz_labeller << ss
      end

      __walk_each_sidesystem

      @stdout.puts "}"

      NIL_
    end

    def __walk_each_sidesystem

      @a.each do | ss |
        __do_sidesystem ss
      end
      NIL_
    end

    def __do_sidesystem ss

      if ss.lib_path
        __do_library_file ss
      end
      NIL_
    end

    def __do_library_file ss

      if ss.inferred_dependencies
        __go_deps ss
      else
        @stderr.puts "(no constants found, skipping - #{ ss.lib_path })"
      end
      NIL_
    end

    def __go_deps ss  # etc

      lhs = "  #{ ss.medo } -> "

      ss.inferred_dependencies.each do | sym |
        @stdout.puts "#{ lhs }#{ @h.fetch( sym ).medo }"
      end
      NIL_
    end
  end
end

Skylab::Slicer::SS_Dep__.new( nil, $stdout, $stderr, ::ARGV ).execute
