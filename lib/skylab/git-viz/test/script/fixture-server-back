#!/usr/bin/env ruby -w

# this is only for testing the responder "by hand" as a one-off request.
# this builds the manifest and sends the args to it and returns and exits.
# it is not a long-running process. it is *not* part of [#018] the stack used
# for building fixtures, it is part of the stack used for building that stack.
#
# we are testing:
#  • whether the guy loads ok (when rbx)
#  • the payload mechanics of how responses are made
#  • whether the responses look right when going back to the middle
#
# with this part of the stack able to run standalone we can run it in
# different rubies, e.g to use the d-ebugger in one, to see if warnings are
# triggered in that same one, and to see if it works at all in the other.
#
# this is *not*:
#  • part of the production stack
#  • testing anything to do with this being a long-running process
#  • testing anything to do with the transport layer of receiving requests,
#    sending responses
#
# since this is a one-off for doing manual testing, do not exceed one screen.

require_relative '../../core'

module Skylab::GitViz

  class ONE_OFF___

    def initialize stderr, argv
      @argv = argv
      @y = ::Enumerator::Yielder.new( & stderr.method( :puts ) )
    end
    def execute
      mani = bld_manifest
      response = mani.process_strings @argv
      @y << "got back result code \"#{ response.result_code }\"."
      @y << "got back #{ response.statement_count } statement(s):"
      while (( s_a = response.gets_statement_string_a ))
        @y << "[ #{ s_a * ' ][ ' } ]"
      end
      @y << "done with test."
    end
  private
    def bld_manifest
      GitViz::Test_Lib_::Mock_System::Fixture_Server::Responder__.new @y
    end

    Autoloader_[ ( GitViz::TestSupport = ::Module.new ),  # eek: hack to avoid
      GitViz.dir_pathname.join( 'test' ) ]  # loading  crufty, unnec. t.s

    self
  end.new( $stderr, ::ARGV ).execute
end
