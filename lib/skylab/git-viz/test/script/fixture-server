#!/usr/bin/env zsh

# read [#018] the system call fixture server narrative

me=$0 ; typeset -a rest ; rest=("${*[@]}")

serr () {
  print -- "server front:" $* 1>&2
}

-execute () {
  -peek-parse-args
  -check-that-rbenv-is-installed || return $?
  -ensure-rbx-is-being-used || return $?
  typeset cmd_head="${me:h}/fixture-server-middle"
  serr "exec'ing: ${cmd_head} ${rest[@]}"
  exec "${cmd_head}" "${rest[@]}"
  print -- "never see"
}

-peek-parse-args () {
  if [[ --stderr-path == $rest[1] ]] ; then
    -peek-parse-stderr-path-arg 2
  fi
}

-peek-parse-stderr-path-arg () {
  _STDERR_PATH=$rest[$1]
  serr "remaining stderr will written to: ${_STDERR_PATH}"
  serr () {
    echo "server front:" $* >> "$_STDERR_PATH"
  }
}

-check-that-rbenv-is-installed () {
  which rbenv > /dev/null
  (( 0 == $? )) && return 0
  serr "${0:t} requires rbenv for now (it's for your own good)"
  return 3
}

prefix=rbx-

-ensure-rbx-is-being-used () {
  typeset version
  version=$( rbenv version )
  typeset ver=$version[1,4]
  if [[ $prefix == $ver ]] ; then
    serr "currently using $version"
  else
    -attempt-to-switch-to-rbx
  fi
}

-attempt-to-switch-to-rbx () {
  rbenv versions | cut -c3- | awk ';{ print $1 };' | while read line ; do
    if [[ $prefix == $line[1,4] ]] ; then
      this_one=$line
      break
    fi
  done
  typeset ver ; ver=$( echo $version | awk ';{ print $1 };' )
  serr "changing from $ver to $this_one to run the server with concurrency"
  eval $( rbenv sh-shell $this_one )
}

-execute
