#!/usr/bin/env zsh  #just-for-syntax-highlighting

part-show-description () {
  serr "description: build dump for the 'git show' command"
}

part-show-usage () {
  serr "usage: $($partlib_say_invocation_name) [-h]"
}

-require-partlib

typeset part_func=$0 ; typeset -a rest ; rest=("$*[@]")

typeset adverb asset_output_dir
partlib-parse-adverb-and-asset-output-dir

-partlib-help && return  # #debugging: comment out to propagage to API

-partlib-require-asset-output-dir || return $?

--each-show-command () {

  typeset cd="$2" dd ; ---prepare-cd-and-dd

  typeset cmd_SHA_is_intentionally_invalid
  typeset story_cmd_s=$1 real_cmd_s ; typeset -a cmd
  ---prepare-cmd || return $?

  typeset o e es
  ---execute-the-cmd || return $?

  ---storify-output-dumpfile || return $?

  $3 $o $e $es
}
---prepare-cd-and-dd () {
  if [[ ! -z  $cd ]] ; then
    cd=/$cd ; typeset dd=/..
  fi
}
---prepare-cmd () {
  if ---cmd-intentionally-refers-to-an-invalid-sha ; then
    cmd_SHA_is_intentionally_invalid=true
  fi
  if [[ "$cmd_SHA_is_intentionally_invalid" == true ]] ; then
    real_cmd_s="$story_cmd_s"
  else
    real_cmd_s=$( partlib-unstorify-command "$story_cmd_s" ) || return $?
  fi
  cmd=(${(z)real_cmd_s})
}
---cmd-intentionally-refers-to-an-invalid-sha () {
  if [[ "$freetags[nonexistant_SHA]" == true ]] ; then
    return 0
    # yes on everage there is a (4.0e-06) chance this hack will fail, if
    # ever there is an actual SHA that matches our fabriacated SHA that
    # is intended to be non-existant. it is a risk we are willing to take
  else
    return 1
  fi
}
---execute-the-cmd () {
  o==() ; e==()
  loud-cd $asset_output_dir$cd || return $?
    serr "${triad_indent}${cmd[1]} ${(j: :)cmd[2,-1]}"
    $cmd[1] $cmd[2,-1] 1>$o 2>$e ; es=$?
    serr "${triad_indent}(wrote above to $o and $e)"
  loud-cd "..$dd"
}
---storify-output-dumpfile () {
  if [[ "$cmd_SHA_is_intentionally_invalid" == true ]] then
    return $gv_success
  fi
  if [[ ! -s $o ]] ; then
    serr "nothing was outputted. nothing to normalize."
    return $gv_err_no_resource
  fi
  typeset match mbegin mend
  setopt extendedglob
  if [[ $story_cmd_s = (#b)*\ ([a-f0-9]##)\ -- ]] ; then
    $particular_vcs_dir/script/storify-date-on-first-line "$o" "$match[1]"
  else
    serr "failed to parse out the fake sha from '$story_cmd_s'"
    return $gv_err_param_is_extra_white_grammatical
  fi
}

# print "\n\npart-repo-show:(${(f)rest})\n\n" ; return 0  # #debugging

troika-lookup-system-commands --each-command --each-show-command\
  --command-white-filter-regex '^git show\b'\
  --chdir-prefix-white-filter /derp/berp "${rest[@]}"
