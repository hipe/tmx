#!/usr/bin/env zsh  #just-for-syntax-highlighting

-require-partlib

typeset part_func=$0 ; typeset -a rest ; rest=("$*[@]")

typeset adverb asset_output_dir
partlib-parse-adverb-and-asset-output-dir

typeset fixtures_dir
fixtures_dir=${system_commands_manifest_path:h}/${asset_stem}

typeset early_exit=false is_dry_run=false stay=true

--report-clean-usage () {
  serr "usage: ${me} clean [-h][-n]"
}

while [[ $stay == true ]] ; do

  case "$rest[1]" in
    -h | --help )
      --report-clean-usage
      serr "description:  • remove the ENTIRE dir: ${asset_output_dir}"
      serr "              • remove the ENTIRE dir: ${fixtures_dir}"
      serr "options:"
      serr "  -n, --dry-run   dry run."
      rest[1,1]=()
      early_exit=true
      ;;
    -n | --dry-run)
      is_dry_run=true
      rest[1,1]=()
      ;;
    *)
      stay=false
      ;;
  esac
done

if (( 0 < $#rest )) ; then
  serr "unexpected argument(s): ${(f)rest}"
  [[ $early_exit == true ]] || --report-clean-usage
  return $gv_err_extra_param
fi

[[ $early_exit == true ]] && return 0

--clean-rm () {
  typeset OMG_OMG="$1"
  if [[ ! -e $OMG_OMG ]] ; then
    serr "doesn't exist, nothing to do: $OMG_OMG"
    return $gv_success
  fi
  if [[ ! -d $OMG_OMG ]] ; then
    serr "not a directory: $OMG_OMG"
    return $gv_err_no_resource
  fi
  serr "rm -rf $OMG_OMG"
  if [[ ! ( "$OMG_OMG" = *[./]mock-repo-1 ) ]] ; then  # FINAL SANITY CHECK
    serr "my god something almost went horribly wrong: ($OMG_OMG)"
    return $gv_err_no_resource
  fi
  if [[ ! ( $is_dry_run == true ) ]] ; then
    rm -rf -- "$OMG_OMG"  # EEK
  fi
}

--clean-rm "$asset_output_dir" || return $?
--clean-rm "$fixtures_dir" || return $?
