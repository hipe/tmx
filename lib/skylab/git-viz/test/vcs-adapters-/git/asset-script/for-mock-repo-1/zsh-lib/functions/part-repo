#!/usr/bin/env zsh  #just-for-syntax-highlighting

-require-partlib

typeset part_func=$0 ; typeset -a rest ; rest=($*)

typeset dirname=$rest[$(($#rest - 1))]
rest[$(($#rest - 1)),$#rest]=()

case $rest[1] in
  -h | --help )
    serr "usage: $($partlib_say_invocation_name) [-h]"
    serr "description: builds a git resposity with three files,"
    serr "             and carries them through a story of three commits."
    return 0
    ;;
esac

if [[ -z $dirname ]] ; then
  serr "usage: $($partlib_say_invocation_name) <dirname>"
  return $gv_err_missing_param
fi

if (( 0 < $#rest )) ; then
  serr "($0 ignoring: ${(f)rest})"
fi

required-parameter 'vcs' || return $?
typeset git=$vcs

if [[ -d "$dirname" ]] ; then
  serr "using existing $dirname"
  return $gv_success
fi

mkdir -- "$dirname"

cd -- "$dirname"

mkdir -p "dirzo/it's just"

typeset file_1 file_2 file_3_a file_3_b

file_1="dirzo/everybody in the room is floating"
file_2="dirzo/it's just"/"funky like that"
file_3_a="dirzo/move-before"
file_3_b="dirzo/move-after"

"$git" init .

cat > "$file_2" <<HERE
a
b
c
d
e
HERE

"$git" add "$file_2"
"$git" commit -m "initial commit (outside of the story)" >> log


echo "a
b
c" > "$file_1"

"$git" add "$file_1"
"$git" commit -m "commit to be treated as commit 345345" >> log


cat > "$file_1" <<HERE
A
b
C
D
HERE

cat > "$file_2" <<HERE
0
1
2
3
4
HERE

echo "one-line" > "$file_3_a"

"$git" add "$file_3_a"
"$git" add -u
"$git" commit -am "commit to be treated as commit 123123" >> log


"$git" mv "$file_3_a" "$file_3_b"
"$git" commit -m "commit to be treated as commit 234234" >> log

serr "finished writing 4 commits (the last 3 are for the story). see 'log'."
cd ..
return $gv_success
