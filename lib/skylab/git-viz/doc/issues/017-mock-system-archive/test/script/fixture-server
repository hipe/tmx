#!/usr/bin/env zsh

# read [#018] the system call fixture server narrative

me=$0 ; typeset -a rest ; rest=("${*[@]}")

-execute () {
  -normalize-environment || return $?
  -validate-rbenv-is-in-path || return $?
  -switch-to-rbx-if-necessary || return $?
  typeset cmd_head="${me:h}/fixture-server-middle"
  serr "exec'ing: ${cmd_head} ${rest[@]}"
  exec "${cmd_head}" "${rest[@]}"
  print -- "never see"
}

-normalize-environment () {
  if [[ -z $HOME ]] ; then
    serr "fatal: HOME environment variable must be set"
    return 4
  fi
  typeset -a a ; typeset home_="$HOME"
  a[$(( ${#a} + 1 ))]="$home_/.rbenv/shims"
  a[$(( ${#a} + 1 ))]="$home_/.rbenv/bin"
  a[$(( ${#a} + 1 ))]="/usr/bin"  # rbenv will need to find 'head' here
  a[$(( ${#a} + 1 ))]="/bin"  # rbenv will need to find bash here
  typeset path_ ; path_="${(j_:_)a}"
  serr "normalizing PATH to: $path_"
  export PATH="$path_"
}

-validate-rbenv-is-in-path () {
  -test-rbenv && return 0
  serr "fatal: rbenv not in path. is it installed?"
  return 4
}

-test-rbenv () {
  which rbenv > /dev/null
}

-switch-to-rbx-if-necessary () {
  typeset current_fragement current_version
  -set-current-fragment-and-current-version
  if -test-current-fragment ; then
    serr "using correct ruby: $current_version"
  else
    -switch-to-rbx
  fi
}

target_fragment=rbx-

-set-current-fragment-and-current-version () {
  typeset long_version ; long_version=$( rbenv version )
  current_version="${long_version%% *}"
  current_fragment="${current_version[1,4]}"
}

-switch-to-rbx () {
  typeset target_version
  -find-target-version || return $?
  typeset cmd ; cmd=$( rbenv sh-shell $target_version )
  serr "changing from $current_version run the server with concurrency: $cmd"
  eval "$cmd"
  -set-current-fragment-and-current-version
  if ! -test-current-fragment ; then
    serr "FATAL: strange, hack didn't work"
    return 4
  fi
}

-test-current-fragment () {
  [[ "$target_fragment" == "$current_fragment" ]]
}

-find-target-version () {
  typeset line long_target_version
  target_version=''
  rbenv versions | cut -c3- | awk ';{ print $1 };' | while read -r line ; do
    if [[ $target_fragment == $line[1,4] ]] ; then
      long_target_version=$line
      break
    fi
  done
  if [[ -z $long_target_version ]] ; then
    serr "fatal: none of the installed rubies have the stem '$target_fragment'"
    return 4
  fi
  target_version=${long_target_version%% *}
}

serr () {
  print -- "front script (zsh) ${@}" 1>&2
}

-execute
