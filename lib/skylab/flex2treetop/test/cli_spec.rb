require_relative 'my-test-support'

module Skylab::Flex2Treetop::MyTestSupport
  describe Skylab::Flex2Treetop do
    extend CLI::ModuleMethods ; include CLI::InstanceMethods
    context "has a CLI that" do
      context "0   : with no args" do
        argv
        an_explanation "of what it's expecting", /expecting.+flexfile/i
        an_invite
      end
      context "1.1 : with one giberrsh arg" do
        argv 'not-there.txt'
        an_explanation "that the file is not found",
          /file.+not found.+not-there\.txt/
        an_invite
      end
      context "1.2 : with one nonsensical option" do
        argv '-x'
        an_explanation "that the option is invalid", /invalid option.+x/
        an_invite
      end
      context "1.3 : with the -h help flag" do
        argv '-h'
        it "displays the help screen" do
          err = self.err # necessary because we mutate it
          unstylize( err.shift ).should match(/usage: xyzzy .{24,} <flexfile>/i)
          err.shift.should eql('')
          unstylize( err.shift ).should match(/\Aoptions:\z/i)
          bad = err.select { |s| s !~ /\A[[:space:]]+/ }
          bad.should eql([])
        end
      end
      context "1.4 : reads flexfiles" do
        context "from a file named by ARG1" do
          argv fixture(:tokens)
          it "and writes a treetop grammar to stdout" do
            out = self.out.reverse # look! (begin)
            out.length.should be_within(50).of(137)
            out.pop.should match(Flex2Treetop::AUTOGENERATED_RX)
            out.pop.should match(/from flex name definitions/i)
            out.pop.should match(/rule ident/)
            out.first.should eql('end') # look! (end)
            err.length.should be >= 1
            err.last.should match(/notice.+skipping/i)
          end
        end
      end
    end
  end
end
