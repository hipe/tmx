#!/usr/bin/env ruby -w

# do a 'git rest HEAD~1' IFF the top commit has the string "wip" in it

# (incidentally we now use a single-line shell macro for this)

_INPUT_ISSUE = 1
_OK = 0
_SCRIPT_ISSUE = 2
y = nil  # EEK

_core_program = -> argv, _, _, stderr, pn_s_a do

  require 'open3'

  y = ::Enumerator::Yielder.new( & stderr.method( :puts ) )

  _exitstatus = nil ; did_bork = false
  say_bork = -> msg do
    "stopping because #{ msg }"
  end
  bork = -> issue_d, msg do
    y << say_bork[ msg ] ; issue_d
  end
  _bork = -> issue_d, msg do
    y << say_bork[ msg ]
    did_bork = true ; _exitstatus = issue_d ; false
  end

  program_name = -> do
    x = nil
    p = -> do
      x = [ ::File.basename( pn_s_a.first ), * pn_s_a[ 1 .. -1 ] ] * ' '
    end
    -> do
      x || p[]
    end
  end.call

  if argv.length.nonzero?
    y << "usage: #{ program_name[] }"
    y << "description: does 'git reset HEAD~1' IFF \"wip\" appears in HEAD commit"

    if %r(\A--?h(?:e(?:l(?:p)?)?)?\z) =~ argv[0]
      break _OK
    else
      break bork[ _INPUT_ISSUE, "unexpected argument #{ argv[ 0 ].inspect }" ]
    end
  end

  process3 = -> o, e, w, p do
    had_errput = nil
    while (( line = e.gets ))
      had_errput ||= true
      y << "  (git errput: #{ line.chomp })"
    end
    ok = true
    while (( line = o.gets ))
      ok = p[ line.chomp ]
      ok or break
    end
    if ! ok
      while (( line = o.gets ))
        y << "  (skipped: #{ line.chomp })"
      end
    end
    d = w.value.exitstatus
    if had_errput
      _bork[ d, "had errput from git" ]
    end
    if d.nonzero?
      _bork[ d, "got error code from git - #{ d }" ]
    end
    ! did_bork && ok
  end

  y << (( cmd = 'git log --oneline -2' ))

  _i, o, e, w = ::Open3.popen3 cmd

  commit = ::Struct.new :sha, :msg
  commit_a = [ ]
  rx = /\A(?<sha>[a-f0-9]{7})[ ](?<comment>.+)\z/
  process3[ o, e, w, -> line do
    y << "  (git output: #{ line })"
    md = rx.match line
    md or break _bork[ _SCRIPT_ISSUE, "did not match regex - #{ line.inspect }" ]
    commit_a << commit.new( * md.captures ) ; true
  end ]
  did_bork and break _exitstatus

  if 2 != commit_a.length
    fail "sanity - expected 2 had #{ commit_a.length } commits"
  end

  require 'strscan'

  scn = ::StringScanner.new (( ci = commit_a[ 0 ] )).msg

  keyword = 'wip'

  scn.skip( /[[:space:](]/ )

  word = scn.scan( /[[:alnum:]]*/ )

  if /\A#{ ::Regexp.escape keyword }\z/i !~ word
    y << "HEAD commit comment: #{ ci.msg.inspect }"
    break bork[ _INPUT_ISSUE, "we won't do a 'git reset' unless #{
      }the first word is #{ keyword.inspect } #{
        }(had #{ word.inspect })" ]
  end

  y << (( cmd = "git reset #{ commit_a.fetch( 1 ).sha }" ))
  _i, o, e, w = ::Open3.popen3 cmd
  process3[ o, e, w, -> line do
    y << "  (git output: #{ line })"
  end ]
  did_bork and break _exitstatus
  y << "stepped HEAD backwards by one commit. done."
  _OK
end

program = -> i, o, e, pn_s_a, argv do

  d = _core_program[ i, o, e, pn_s_a, argv ]

  case d
  when _OK ; # nothing
  when _SCRIPT_ISSUE ; y << "please fix this script and try again."
  when _INPUT_ISSUE ; y << "please try again with correct input."
  else y << "sorry about the error (exitstatus #{ d })."
  end

  d
end

if __FILE__ == $PROGRAM_NAME
  exit program[ ARGV, $stdin, $stdout, $stderr, [ $PROGRAM_NAME ] ]
else
  Skylab__Zerk__OneOffs::TMX_grh = program  # #[#ze-063.1] mountable one-off
end
