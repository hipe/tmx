#!/usr/bin/env ruby -w

# one-off for writing git commit messages (like git-flow)
# (an antique - not used - just here for coverage - #todo)

module Skylab
  # might be re-opening, might not. assume might be either
end

class Skylab::Git_citxt  # #[#ze-063.1] mountable one-off

  class << self
    def call * standard_five
      new( * standard_five ).execute
    end
    alias_method :[], :call
  end  # >>

  # -

    def initialize argv, i, o, e, pn_s_a

      __init_as_CLI_client argv, i, o, e, pn_s_a

      @is_finished = @pwd = @git_dir_pathname = @dir_pathname_raw = nil

      @is_dry_run = @be_verbose = nil
    end

    def execute

      # we can't do this simply because o.p exits after help

      argv = remove_instance_variable :@argv

      @do_show_help = false
      if argv.length.nonzero?
        op = option_parser
        begin
          op.parse! argv
        rescue ::OptionParser::ParseError => pe
        end
      end

      if pe
        @infostream.puts pe.message
        @infostream.puts invite_line
        ERROR_
      else
        __maybe_execute op, argv
      end
    end

    def __maybe_execute op, argv

      if @is_finished
        es = 0
      elsif @do_show_help
        __show_help op
        es = 0
      end

      if es
        es
      else
        if argv.length.nonzero?
          self.dir_path = argv.shift
        end
        if argv.length.nonzero?
          @infostream.puts "unexpected arg(s): #{ argv.inspect }"
          ERROR_
        else
          __do_execute
        end
      end
    end

    def __show_help op

      io = @infostream
      io.puts usage_line
      io.puts
      io.puts "#{ em 'synopsis:' } old script to help create a commit message"
      io.puts
      io.puts "#{ em 'options:' }"
      op.summarize io
      NIL_
    end

    # execute

  private

    ref_rx = /\Aref: ([^\n]+)\n\z/

    define_method :branch_name do
      res = nil
      begin
        head_pathname = @git_dir_pathname.join 'HEAD'
        content = head_pathname.read
        unless ref_rx =~ content
          send_error_string "failed to read content of #{ escape_path head_pathanme }"
          res = false
          break
        end
        whole = $~[1]
        res = whole.split( '/' ).last
      end
      res
    end

    filename = 'next-ci'

    define_method :build_option_parser do
      require 'optparse'
      o = ::OptionParser.new

      o.base.long[ 'ping' ] = ::OptionParser::Switch::NoArgument.
        new( & method( :ping ) )

      o.on '-h', '--help', 'this screen.' do
        @do_show_help = true
      end

      o.on '-n', '--dry-run', 'dry run.' do
        @is_dry_run = true
      end

      o.on '-v', '--verbose', 'be verbose.' do
        @be_verbose = true
      end

      o.banner = <<-HERE.gsub( /^        /, '' )
        #{ usage_line }

        #{ em 'description:' } creates a #{ filename } file.

        #{ em 'options:' }
      HERE
      o
    end

    def ping _
      @infostream.puts "hello from citxt."
      @is_finished = true
      nil
    end

    define_method :create_initial_file do
      res = nil
      begin
        use_dir = nil
        if @dir_pathname_raw
          if ! dir_pathname_expanded.directory?
            send_error_string "#{ em param_label } must be directory: #{ @dir_pathname_raw }"
            break( res = false )
          end
          inside = dir_pathname_expanded.to_s
          outside = @git_dir_pathname.dirname.to_s
          if 0 != inside.index( outside )
            send_error_string "#{ inside } must be inside #{ outside }"
            break( res = false )
          end
          use_dir = dir_pathname_expanded
        else
          use_dir = @git_dir_pathname.dirname
        end
        pathname = use_dir.join filename
        if pathname.exist?
          fail 'sanity'
        end

        s = branch_name
        s or break
        first_line = "[##{ s }]"
        send_info_string( first_line ) if @be_verbose
        bytes = nil
        if @is_dry_run
          bytes = 0
        else
          pathname.open( ::File::WRONLY | ::File::CREAT ) do |fh|
            bytes = fh.write "#{ first_line }\n\n  â€¢ xx"  # etc
          end
        end
        send_info_string "created #{ escape_path pathname } (#{ bytes } bytes)"
        res = pathname
      end while nil
      res
    end

    def dir_path= str
      require 'pathname'
      @dir_pathname_raw = ::Pathname.new str
      str
    end

    def dir_pathname_expanded  # assumes `dir_pathname_raw`
      @dir_pathname_expanded ||= @dir_pathname_raw.expand_path
    end

    define_method :__do_execute do
      res = nil
      begin
        @git_dir_pathname = find_git_dir or break
        existing = find_existing
        if existing
          if @dir_pathname_raw
            if ! reconcile_dir_pathname_with_existing existing
              res = false
              break
            end
          end
          send_info_string "using #{ escape_path existing }"
        else
          existing = create_initial_file
          existing or break( res = existing )
        end
        editor = ::ENV['EDITOR'] || 'vi'
        cmd = "#{ editor } #{ escape_path existing }"
        if @is_dry_run
          send_info_string "would have executed `#{ cmd }`"
        else
          exec cmd
        end
      end while nil
      res
    end

    define_method :find_existing do
      curr = @pwd
      stop = @git_dir_pathname.dirname
      if ! @pwd.to_s.index( stop.to_s )  # is pwd equal to or under stop dir?
        fail 'sanity'
      end
      found = nil
      loop do
        try = curr.join filename
        if try.exist?
          found = try
          break
        end
        if curr == stop
          break
        end
        curr = curr.dirname
      end
      found
    end

    git_dir_basename = '.git'

    define_method :find_git_dir do
      require 'pathname'
      curr = @pwd = ::Pathname.pwd
      found = false
      seen = [ ]
      loop do
        try = curr.join git_dir_basename
        if try.exist?
          found = try
          break
        end
        seen.push curr.basename
        parent = curr.dirname
        if parent == curr
          break
        else
          curr = parent
        end
      end
      if ! found
        send_error_string "couldn't find #{ em git_dir_basename } directory anywhere from #{
          }pwd (\"#{ pwd }\") up to \"/\" (#{ seen.length } dirs)"
      end
      found
    end

    param_label = '<dir_to_create_file_in>'

    define_method :param_label do param_label end

    define_method :reconcile_dir_pathname_with_existing do |existing|
      if dir_pathname_expanded == existing.dirname
        true
      else
        send_error_string "couldn't reconcile filenames - #{
        }you specified a #{ em param_label } (#{ @dir_pathname_raw }), #{
        }but an existing #{ filename } was found (#{ escape_path existing }) #{
        }and it was not in that directory. Either don't specify the path or #{
        }move the file to where you want it."
        false
      end
    end

    define_method :usage_line do
      "#{ em 'usage:' } #{ program_name } [-h] [-v] [ #{ param_label } ]"
    end

    # == (used to be a superclass)

    def __init_as_CLI_client argv, _i, o, e, pn_s_a
      @argv = argv
      @infostream = e
      @paystream = o
      @pn_s_a = pn_s_a
      NIL
    end

    def em str
      "\e[1;32m#{ str }\e[0m"
    end

    def emit type=:info, str
      instance_variable_get( :payload == type ? :@paystream : :@infostream ).
        puts str
      NIL_
    end

    def send_error_string msg
      emit :error, "couldn't #{ em program_name } - #{ msg }"
      false
    end

    def escape_path pathname
      pathname.relative_path_from( @pwd ).to_s
    end

    def send_info_string msg
      emit :info, "#{ em program_name } #{ msg }"
      nil
    end

    def invite_line
      "try #{ em "#{ program_name } -h" } for help"
    end

    def option_parser
      @option_parser ||= build_option_parser
    end

    def program_name
      @___pn ||= __build_program_name
    end

    def __build_program_name
      [ ::File.basename( @pn_s_a.first ), * @pn_s_a[ 1 .. -1 ] ] * ' '
    end
  # -

  ERROR_ = 5
  NIL_ = nil
end

if __FILE__ == $PROGRAM_NAME
  Skylab::Git_citxt.new( ARGV, $stdin, $stdout, $stderr, [ $PROGRAM_NAME ] ).execute
else
  Skylab__Zerk__OneOffs::Git_citxt = Skylab::Git_citxt  # #[#ze-063.1] mountable one-off
end
