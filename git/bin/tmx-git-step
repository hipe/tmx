#!/usr/bin/env ruby -w

module Skylab
end

class Skylab::Git_step

  # ->

    class << self

      def _call i, o, e, pn_s_a, a
        new( i, o, e, pn_s_a, a ).execute
      end

      alias_method :[], :_call
      alias_method :call, :_call

    end  # >>

    def initialize i, o, e, pn_s_a, a

      @argv = a
      @pn_s_a = pn_s_a
      @serr = e;

      @_path = '.step'
    end

    def execute

      file = @argv[ 0 ]
      if file

        if '-' == file[ 0 ]

          y = ::Enumerator::Yielder.new( & @serr.method( :puts ) )

y << "usage: #{ __program_name }"
y << "       #{ __program_name } PATH"
y << nil
y << 'synopsis: the first form commits all the changes in "the file", making'
y << 'commit messages like "(step 1)", "(step 2)", etc., intended for later'
y << 'rebasing/squashing etc. the second form sets "the file".'

          SUCCEEDED_
        else
          __write file
        end
      else
        __commit
      end
    end

    def __program_name
      ::File.basename( @pn_s_a.last )
    end

    def __write file

      d = 0
      ::File.open( @_path, ::File::CREAT | ::File::WRONLY ) do | fh |
        s = "0 #{ file }#{ NEWLINE_ }"
        d = fh.write s
      end

      @serr.puts "wrote \"#{ @_path }\" (#{ d } bytes)"
      SUCCEEDED_
    end

    def __commit

      begin
      fh = ::File.open @_path, ::File::RDWR
      rescue ::Errno::ENOENT => e
      end

      if e

        md = /\A(?<first>[^@]+)@ [a-z_]+ - (?<rest>.+)\z/.match e.message

        first, rest = md.captures

        _pgn = @pn_s_a.join ' '

        @serr.puts "#{ first } \"#{ rest }\" - use `#{ _pgn }` with a path argument"
        FAILED_
      else

        @fh = fh
        es = execute_
        fh.close
        es
      end
    end

    def execute_

      line = @fh.gets
      @fh.gets and self._SANITY

      md = /\A(?<integer>\d+) (?<rest>[^\n]+)\n\z/.match line
      md or fail "strange stepfile formatting: #{ line.inspect }"

      @_last_step_number = md[ :integer ].to_i
      @_file_of_interest = md[ :rest ]

      __start_shell
      ok = __git_add_file
      ok &&= __git_confirm_change
      ok &&= __git_commit
      ok &&= __rewrite_step_file
      ok ? 0 : 5
    end

    def __start_shell

      require 'open3'
      @_i, @_o, @_e, @_w = ::Open3.popen3 'bash'
      nil
    end

    def __git_add_file

      @_i.puts "git add #{ @_file_of_interest }"
      _expect_nothing
    end

    def __git_confirm_change

      @_i.puts "git status --porcelain"

      s = _expect_sout_string

      a = s.split NEWLINE_

      if 'M' == a.first[ 0, 3 ].strip
        ACHIEVED_
      else
        @serr.puts "is not modified: #{ @_file_of_interest }"

        @serr.puts "  ( status as reported by git: )"
        a.each do | s_ |
          @serr.puts "  ( #{ s_ } )"
        end
        @serr.puts "nothing to do."
        UNABLE_
      end
    end

    def __git_commit

      @_this_step_number = @_last_step_number + 1
      @_i.puts "git commit -m \"(step #{ @_this_step_number })\""
      _expect_sout
    end

    def _expect_sout

      s = _expect_sout_string
      if s
        @serr.write s
        ACHIEVED_
      else
        _s = io.read_nonblock 1024   # hypothetically could break on long filename
        @serr.puts "Unexpected errput: #{ _s }"
        UNABLE_
      end
    end

    def _expect_sout_string

      _select
      io = @_aa.first.first
      if @_o == io
        io.read_nonblock CHUNK_SIZE_  # hypothetically could break on long filename
      else
        UNABLE_
      end
    end

    def _expect_nothing
      _select
      if @_aa
        s = @_aa.first.first.read_nonblock CHUNK_SIZE_
        @serr.write s
        @serr.puts "(maybe this has an invalid path - #{ @fh.path })"
        UNABLE_
      else
        ACHIEVED_
      end
    end

    def _select
      @_aa = ::IO.select [ @_o, @_e ], nil, nil, 0.33
      nil
    end

    def __rewrite_step_file

      @fh.rewind
      @fh.truncate 0
      s = "#{ @_this_step_number } #{ @_file_of_interest }#{ NEWLINE_ }"
      @fh.write s
      @serr.puts "(re-wrote #{ @fh.path } (#{ s.length } bytes))"
      ACHIEVED_
    end

    ACHIEVED_ = true
    CHUNK_SIZE_ = 1024
    FAILED_= 5
    NEWLINE_ = "\n"
    SUCCEEDED_ = 0
    UNABLE_ = false
  # <-
end

if __FILE__ == $PROGRAM_NAME
  exit Skylab::Git_step[ $stdin, $stdout, $stderr, [ $PROGRAM_NAME ], ARGV ]
end
