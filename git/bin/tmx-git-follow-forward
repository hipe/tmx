#!/usr/bin/env ruby -w

class Skylab_Git__follow_forward__one_off

    def initialize argv, sin, sout, serr, pn_s_a
      @__argv = argv
      @program_name_string_array = pn_s_a
      @serr = serr
      @sin = sin
      @sout = sout
      @system_proc = nil
      block_given? and yield self
      @system_proc ||= -> { require 'open3' ; ::Open3 }
    end

    def system_by & p
      @system_proc = p ; nil
    end

    def execute
      a = remove_instance_variable :@__argv
      len = a.length
      if len.nonzero?
        v = '-v'
        if v == a.first
          a.shift
          do_debug = true
        elsif 1 < len && v == a.last
          a.pop
          do_debug = true
        end
        if do_debug
          len = len - 1
        end
      end

      if len.zero?
        @serr.puts "expecting #{ _main_argument }"
        _usage_and_invite
      else
        rx = /\A--?h(?:e(?:l(?:p)?)?)?\z/
        if rx =~ a[0] || 1 < len && rx =~ a.last
          _help
        elsif 1 == len
          @do_debug = do_debug
          @path = a.fetch 0
          __execute
        else
          @serr.puts "unexpected argument: #{ a[1].inspect }"
          _usage_and_invite
        end
      end
    end

    def _usage_and_invite
      _usage
      _invite
    end

    def _help
      _usage
      @serr.puts #zero      teens     twenties  thrities forties   fifties   sixities  seventies 0
      @serr.puts "description: like `git log --follow` but forwards from a point in the past"
      @serr.puts "             rather than backwards from the present: whereas that command shows"
      @serr.puts "             the commits that effected the content of a current file (edits and"
      @serr.puts "             renames), this command can be used on a file that no longer exists"
      @serr.puts "             at the argument path but once did. it will then show the series of"
      @serr.puts "             renames that either lead to a delete or to a rename to an existent"
      @serr.puts "             file. (this has the DNA of a one-off, undiscovered edges probably"
      @serr.puts "             exist.)"
      @serr.puts
      @serr.puts "option:"
      @serr.puts "  -v         (verbose) some debugging info is written to stderr."

      SUCCESS_EXITSTATUS__
    end

    def _usage
      @serr.puts "usage: #{ _program_name } [-v] #{ _main_argument }"
    end

    def _main_argument
      '<path>'
    end

    def _program_name
      ::File.basename @program_name_string_array.fetch(-1)
    end

    # --

    def __execute
      __prepare
      _ok = __normalize_path
      _ok && __work
      @_exitstatus
    end

    def __prepare
      @command_prototype = COMMAND_PROTOTYPE__
      @_current_path = @path
      @_exitstatus = SUCCESS_EXITSTATUS__
      @_lib = begin ; require 'skylab/git' ; ::Skylab::Git end
      @listener = __build_selective_listener
      @_magnetics = @_lib::Magnetics
      @system = remove_instance_variable( :@system_proc ).call
    end

    def __normalize_path
      if '/.'.include? @path[ 0 ]
        @serr.puts "path must be relative and from root of repository"
        @_exitstatus = _invite
        UNABLE_
      else
        ACHIEVED_
      end
    end

    # assume the argument path does not currently exist in the tree but did.
    # this process: find the last commit to have touched the current path
    # (so since the path is not a current path, it would have to be either
    # a move *from* path X *to* the current path, or a delete). if delete,
    # we now know what happend to the path and we are done. otherwise, repeat
    # this process with current path as path X.
    #
    # ideally the result is a series of either:
    #   - zero or more renames and one delete -OR-
    #   - one or more renames
    #
    # if you have the case where different "files" (in terms of their
    # content-identity) travelled through the same path at different points
    # in time, only the file that was most recently at that path is reachable.
    # maybe this could infinite loop in some such scenarios..

    def __work

      last_seen_sha = nil
      begin

        ci = __last_commit
        ci || break
        if last_seen_sha == ci.SHA_string
          # the the last commit to touch the file in its new path is the
          # rename commit that moved it there, which we already did so
          break
        end
        last_seen_sha = ci.SHA_string

        o = __parse_show_screen_for ci.SHA_string

        if o.is_rename

          path = o.to_path
          @sout.puts "#{ Commit_like_this__[ ci ] } renamed to #{ path }"
          @_current_path = path
          redo
        end

        if o.is_delete
          @sout.puts "#{ Commit_like_this__[ ci ] } deleted."
        else
          o.is_change || self._OH
        end

        break
      end while above
      NIL
    end

    # -- commands

    def __parse_show_screen_for sha

      current_path = @_current_path

      st = @_magnetics::FileOperationStream_via_PatchProcess.via_sha(
        sha, @command_prototype, @system, & @listener )

      file_operation = nil
      winning_operation = nil

      did_find = -> do
        winning_operation = file_operation
        did_find = -> do
          self._WAHOO
        end
      end

      begin

        file_operation = st.gets
        file_operation || break
        if current_path == file_operation.path
          did_find[]
        end

        redo
      end while nil

      winning_operation || self._SANITY
    end

    def __last_commit
      @_magnetics::Commit_via_Path.call_by(
        path: @_current_path,
        command_prototype: @command_prototype,
        system: @system,
        listener: @listener,
      )
    end

    # -- command support

    def __build_selective_listener
      these = {
        command: :__maybe_emit_command,
        expression: :__express_expression,
      }
      -> * i_a, & ev_p do
        _m = these.fetch i_a.fetch 1
        send _m, ev_p, i_a
      end
    end

    def __maybe_emit_command x_p, _
      if @do_debug
        @serr.puts ">>>> ~ #{ x_p[].join SPACE_ }"
      end
      NIL
    end

    def __express_expression y_p, i_a
      NOTHING_.instance_exec _info_yielder, & y_p
      m = EXPRESSION_MOODS___.fetch i_a.fetch 0
      if m
        send m
      end
      NIL
    end

    NOTHING_ = nil
    EXPRESSION_MOODS___ = {
      error: :__when_expressed_error,
      info: NOTHING_,
    }

    def __when_expressed_error
      @_exitstatus = __invite_passively
      NIL
    end

    def __invite_passively
      @serr.puts "'#{ _program_name } -h' may have more information."
      GENERIC_ERROR_EXITSTATUS__
    end

    def _invite
      @serr.puts "see '#{ _program_name } -h'"
      GENERIC_ERROR_EXITSTATUS__
    end

    def _info_yielder
      @___info_yielder ||= ::Enumerator::Yielder.new( & @serr.method( :puts ) )
    end

    # ==

    Commit_like_this__ = -> ci do
      "#{ Short__[ ci.SHA_string ] } #{ ci.date_string } #{ ci.time_string }"
    end

    Short__ = -> sha do
      sha[ 0, 7 ]
    end

    # ==

    ACHIEVED_ = true
    COMMAND_PROTOTYPE__ = %w( git ).freeze
    GENERIC_ERROR_EXITSTATUS__ = 5
    NIL = nil  # open [#sli-016.C]
    SPACE_ = ' '
    SUCCESS_EXITSTATUS__ = 0
    UNABLE_ = false
end

if File.basename( __FILE__ ) == File.basename( $PROGRAM_NAME )  # #[#tmx-020.5]

  exit Skylab_Git__follow_forward__one_off.new(
    ARGV, $stdin, $stdout, $stderr, [ $PROGRAM_NAME ]
  ).execute

else
  Skylab__Zerk__OneOffs::Git_follow_forward = -> * five do  # #[#ze-063.1] mountable one-off
    Skylab_Git__follow_forward__one_off.new( * five ).execute
  end
end
