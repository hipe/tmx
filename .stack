the big question - slicer (G)->(B)
insane experment with [sa] - convert every `should eql` to etc and see diff (C)
unify table under [ze] and then re-apply this to [tmx] counts (covered, add totals row and fix layout)
fix [#ca-xx] => [#co-xx], â€¢ in md's, `_call`=>`call`, memoize vs lazy) (B)
try to simplify [ac]/[ze] procure bound call
[tm] change actors and sessions to magnetics
[tm] no more Selective_Builder_Receiver_Sender_Methods
use [sa] to convert etc to Stream_
integration of sidesystems with TMX should happen in the sides, not TMX
unify other tmx node-centric services (that big dependency graph)
unbreak [tmx]'s heart - use new API somehow to bring old tmx back
consider using plain old glob instead of find, compare viability, performance
utility to replace (generate) greenlist, etc. 'tmx-notes.json'
-1 rewrite (simplify) the "test all" test runner to use this system
-2 rewrite (simplify) the quickie recursive runner to use this system
-3 write a task to update semi-real costs (a bash script loop)
-4 add a randomize option to the below (for now only toplevel, later etc)
(maybe rewrite "test-all counts" (globber) to use two popen3 instead)
test all - test all.
-5 break up into N greenlist using imaginary costs, or a costs files (take into acct order)
-5.1 divvy
-5.2 require only (per test directory, per default globs)
-run-tests is the same as -require-only but one boolean
notify quickie that we will run tests
notify rspec that we will run tests
notify quickie that we will load only
notify rspec that we wil load only
with no v's, one dot per file loaded (i think, this might change)
with one v', list every file (mild rewrite in "require only" operation)
with two v's, show the find file commands
